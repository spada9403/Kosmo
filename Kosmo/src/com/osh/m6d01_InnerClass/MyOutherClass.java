package com.osh.m6d01_InnerClass;

// 하나의 자바 파일로 다수의 클래스를 사용할 수 있기 때문에 코드 관리 편리.
// inner class의 선언부의 형태와 사용법에 따른 네 가지 종류.
// 인스턴스 내부 클래스. : 클래스 in 클래스
// 정적 내부 클래스 : Static을 붙인 내부 클래스.
// 지역 내부 클래스 : 메소드 내부에 클래스를 선언한 경우. 메소드의 안에서만 유효
// 익명 내부 클래스 : 이미 만들어진 클래스를 필요한 메소드만 재정의해서 사용하는것.

public class MyOutherClass { // 외부 클래스의 이름을 파일이름으로 저장.
	
	class MyInnerClass{
		// Inner Class 사용하는 이유 : 코드의 간략화.
		/*
		 * 내부 클래스의 메소드나 속성에static 속성은 사용할수 없다. ( 클래스 안에 static 변수 / 메소드가 있어야 하는데 클래스가 없는 취급이기 때문.)
		 * final 사용이 가능하다. final 의미: 단 한번만 초기화가 가능. final이 붙는다 != 상수이다 
		 * 내부 클래스를 사용하기 위해서는 외부 클래스 인스턴스화가 필요.
		 * 내부 클래스의 클래스 이름은 외부 클래스 안에서만 중복되지 않으면 된다.
		 */
		// final을 붙이면 static으로 사용이 가능하다. -> 상수풀에 올라가기 떄문이다.
		/*
		 * 내부 클래스는 설계구조상 외부 클래스의 인스턴스 생성후 사용할수 있게끔 되어있다.
		 * 그래서 Static을 사용할수 없는 것인데, 이유는 내부 클래스의 모든 변수 클래스는 외부 클래스의 인스턴스가 있어야만
		 * 사용할수 있게 해놨다. 하지만 Static은 컴파일단계에서 메모리에 올리는데 그럼 내부 클래스를 쓸수 있게되므로 막아놓았다.(내부 클래스가 없는 클래스로 취급한다)
		 * 하지만 static final처럼 final을 붙이면 외부/내부 인스턴스를 생성하든 안하든 값의 변화가 없으므로 사용이 가능하게끔 만들어져 있다.
		 */
		static final int age = 10;
		/*
		 * static final 의 의도.
		 * static final 을 사용하는 목적과 의도: 어떤 클래스에서 쓰든 변하지 않고 항상 같은 값을 가지고 있어야 하는 변수를
		 * 클래스에서 인스턴스를 생성할때마다 새로 메모리를 잡고 초기화 하고 쓰는것이 아니라
		 * static 메모리에 단 한번만 초기화 시켜놓고 사용하는것이 더 효율적이고 메모리 낭비가 없기 때문이다.
		 */
		String name;
		
		final public void test() {
			// static 사용 불가능 final 가능
		}
	}
	
	public void test() {
	}
	
}
