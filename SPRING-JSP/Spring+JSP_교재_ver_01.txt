■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문1> 웹브라우저 란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    ●인터넷 망에서 URL 주소에 존재하는 [웹서버]로 [요청 메시지]를 전송하고,
    [응답 메시지]를 받아 그 안에 존재하는 [HTML 소스]를 실행하여
    결과를 화면에 출력하는 클라이언트 쪽 SW를 말한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문2> 웹서버란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    ●[웹브라우저]로 접속하는 다수의 클라이언트의 [요청 메시지]를 받고,
    다수의 클라이언트에게 "동시에" [응답 메시지]로 응답하는 SW를 말한다.
    ●웹서버의 종류
        ▶️Weblogin    =>  웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
        ▶️Websphere   =>  웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
        ▶️JBoss       =>  웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
        ▶️Tomcat      =>  웹프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 연습용

        ▶️IIS         =>  웹프로그래밍 자원20으로 HTML, ASP, C#, 닷넷 을 사용한다.

        ▶️Apache      =>  웹프로그래밍 자원으로 HTML, PHP 사용한다.

        ▶️NodeJS      =>  웹프로그래밍 자원으로 자바스크립트를 사용한다.
                            <참고>react 가 NodeJS 위에서 작동된다.

        ▶️기타        =>  JEUS(Tmax), iPlanet, Oracle 9iAS 등 의 웹서버가 있따.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문3> [웹브라우저]와 [웹서버]의 통신 과정을 설명.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    <1>일반 유저가 [웹브라우저]에서 원하는 [웹서버]의 자원을 호출하기위해 아래와 같은 [URL주소]로 입력하고 엔터.
        이때 [요청 메시지]를 가지고 [웹서버]에 접속을 시도한다.

        http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
        <참고> [요청메시지] 의 내용물?
            URL 주소
            [파라미터명]과 [파라미터값]     =>  클라이언트 입력양식 태그의 name값과 value값 을 말한다.
            [쿠키명]과 [쿠키값]
            [헤더명]과 [헤더값]             =>  클라이언트 웹브라우저의 각종 정보
            기타등등
        <참고>웹서버포트번호가 생략되면 :80 가 디폴트값이다.
        <참고>웹서버의 호출자원명 없이 접속을 시도하면 (=http://서버의도메인주소:웹서버포트번호)
            [웹서버]는 디폴트 대응 자원명을 호출한다.
        <참고> URL 주소 중 http://서버의도메인주소 까지는 유일한 값이다.
                즉 중복되지 않는 유일한 대외적인 주소이다.
                만약 서버의 도메인주소가 www로 시작한다면 전세계의 유일한 주소이다.
                만약 서버의 도메인주소가 www로 시작하지 않는다면 국내의 유일한 주소이다.
                만약 www가 없다면 한국에서 한국에 접속할때만 쓰는 것이다.
        <참고> URL중 http://서버의도메인주소 이후의 주소는 웹서버 내부의 주소이다.
    <2>인터넷 망을 타고 가다 dns서버 에 들려 아래와 같이 URL주소 가 바뀐다.
        http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
        http://서버의도메인주소에대응하는IP주소:웹서버포트번호/웹서버의호출자원명
        DNS 서버에는 서버의 도메인 주소에 대응하는 IP주소가 등록되어 있다.
    <3>[dns서버]를 출발하여 인터넷 망을 타고 가다[IP주소]를 소유한 [서버 운영체제]에 접속한다.
        <참고>[서버 운영체제]는 대부분 [Unix] 또는 [서버용윈도우] 또는 [Linux] 이다.
            Linux는 대규모가 아닌 중소기업용이다.
    <4>[서버운영체제] 내부에 웹서버포트번호를 이용하는 [웹서버]에 접속한다.
    <5>[웹서버]가 URL 주소에 있는 [서버의호출자원명]에 대응하는 [웹프로그래밍 자원]을 호출한다.
        이때 [웹 프로그래밍 자원]에게 [요청 메시지] 안의 파라미터명, 파라미터값, 쿠키명, 쿠키값이 전달된다.
            파라미터명, 파라미터값은 DB연동 시 사용한다.
            바로 파라미터명 이 오라클 테이블의 컬럼명이고,
            파라미터값은 테이블에 입력 또는 삭제 또는 수정 또는 검색할 데이터다.
            쿠키명 쿠키값은 아주 가끔 DB연동시 사용한다.
            [웹프로그래밍 자원]이 jsp라면 xxx.jsp가 호출된다.
            [웹프로그래밍 자원]이 자바의 객체라면 특정 메소드가 실행된다.
    <6>[웹프로그래밍 자원]이 필요에 따라 파라미터명, 파라미터값을 가지고 DB연동을 하고
        그 결과물을 HTML 소스에 반영하여 HTML생성한다.
            <참고>DB연동이 필요 없는 경우 HTML 소스에 DB연동 결과물이 반영되지 않을수도 있따.
            <참고>스프링프레임워크에서는 필요에 따라 HTML 소스로 JSON 이 포함되기도 한다.
            <참고>웹프로그래밍 자원을 어떤 구조로 만드느냐에 따라 아래와 같은 [웹 개발 패턴]으로 나뉜다.
                Model1 패턴
                    1 클라이언트의 웹브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹서버에 접속한다.
                    2 [웹서버]에서 [URL 주소]에 대응하는 xxx.jsp파일이 실행된다.
                    3 xxx.jsp 파일이 실행된 후 HTML 소스가 생성된다
                    4 [웹서버]가 [응답메시지]에 HTML 소스 등을 담아 클라이언트의 웹브라우저에게 [응답메시지]를 전송한다.
                    5 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
                    <장점> 프로젝트 규모가 작고, 유지보수가 많지 않을 경우 작업 속도가 겁나게빠르다.
                    <단점> 프로젝트 규모가 크고, 유지보수가 많을 경우 사용하기 힘들다.
                Model2 패턴
                    1 클라이언트의 웹브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
                        <xxx.do 는 페이크 주소이다. xxx.action, xxx.html 등으로 표현할수 있따.>
                    2 [웹서버]의 [Servlet 객체]의 특정 메소드가 호출된다. 모든 형태의 URL 주소 접속 시 이 Servlet 객체가 맞이한다.
                    3 Servlet 객체의 특정 메소드에서 [URL 주소]에 대응하는 자바 객체(=JavaBean)의 메소드를 호출한다.
                        이 JavaBean 메소드 안에서 DB연동을 한다. 결과물을 Servlet 객체에 리턴.
                    4 Servelt 객체의 특정 메소드에서 [URL 주소]에 대응하는 xxx.jsp 파일을 호출한다.
                    5 xxx.jsp 파일이 실행되면서 DB 연동 결과물을 HTML 소스에 반영하여 HTML 소스를 생성한다.
                    6 [웹 서버]가 [응답메시지]에 HTML 소스 등을 담아 클라이언트의 웹브라우저에게 [응답 메시지]를 전송한다.
                    7 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
                    <단점> Model1 패턴보다 유지보수성이 좋아졌지만
                            시대의 흐름에 따라 프로젝트 규모가 커지기 시작하자 또 유지보수성이 현저히 낮아지게 된다.
                            Model1 보다 체계적이기는 하나 Model1과 동일한 점은 개발자 코딩 개성이 똑 같다.
                            즉 코딩 습관이나 사용하는 객체가 개발자 마다 다르다.
                Spring MVC 패턴
                    Spring framework 에서 지원하는 웹 개발 패턴이다.
                    작동 구조는 Model2 방식과 거의 동일하나 더 많은 자바 객체가 동원된다.
                    Model2 방식의 자바 객체(=JavaBean)와 비슷한 자바 객체가 Spring MVC 방식에서는 더 세분화 되어 여러 층으로 나뉜다.
                    DB연동의 관리를 쉽게하기 위함이다.
                    현재 대기업이나 공기업 프로젝트에서 주로 사용하는 개발 패턴이다.
                    <장점> 프로젝트 규모가 클수록 유지보수성이 좋다. 
                            Spring MVC에서 정한 코딩패턴과 정해진 객체를 사용하기 때문이다.
                            자바 객체 안에서 어노테이션을 적극적으로 사용하여 자바의 날 코딩을 줄어든다.
                            속성변수의 자료형으로 인터페이스를 적극적으로 사용하여 객체 간의 결합도를
                                약하게 하여 연쇄 수정의 범위를 줄인다. (=유지보수성 증가)
                            DB 연동 시 작성하는 SQL 구문을 자바 객체 안에서 하지 않고 XML로 빼서 작업하기도 한다.
                            이때 mybatis라는 프레임 워크를 사용한다.
                    <단점> 환경 설정이 복잡하다.
                            작동원리가 복잡하기에 사전 학습이 어렵다.
                            규모가 작은 프로젝트에서 어울리지 않다.
    <7>DB 연동 결과물이 반영된 HTML 소스를 [웹서버]로 전해준다.
    <8>[웹서버]는 [응답 메시지]를 만든다.
        응답 메시지의 내용물
            DB연동 결과물을 반영한 HTML 소스
            쿠키명과 쿠키값
            헤더명과 헤더값
            사용자가 요청한 자원의 존재 여부 및 재 접속 여부
        <참고>  스프링에서는 HTML 소스에 DB연동 결과물을 반영한 JSON이 있을수 있다.
    <9>[웹서버]는 [웹브라우저]에게 [응답 메시지]를 전송한다.
    <10>[응답 메시지]를 받은 [웹브라우저]는 [응답 메시지]에 내장된
        요청 자원의 존재여부를 확인하고 난 후 있다면
        HTML 소스를 실행하여 [웹브라우저]화면에 출력한다.
        <참고> 요청 자원의 존재 여부 확인 시 없다면, 에러메시지가 존재하는 자체준비 HTML 문서를
                실행하여 화면에 출력한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문4> 위 [웹브라우저]와 [웹서버]의 통신 과정에서 개발자가 기억할 것과 작업해야할 것을 정리하면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    신경써야할 과정 번호
        <5>, <6>
    작업해야할 것
        [URL 주소]에 대응하는 자바 객체(=JavaBean)의 전신인 클래스 제작
        DB연동 시 필요한 SQL 구문 제작
        html 소스를 생성하는 xxx.jsp 제작
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문5> [웹브라우저]가 [웹서버]로 보낸 [요청메시지]를 관리하는 놈이 누굽니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    [HttpServletRequest]객체이다. 웹서버에 지원해주는 객체이다.
    <참고> JSP 페이지에서는 [HttpServletRequest]객체를 request 객체라고 부르기도 한다.
            JSP페이지에서는 request 변수안에 [HttpServletRequest]객체의 메모리 위치 주소값이 저장되어 제공된다.
            이 변수 이름을 객체이름으로 부르기도 합니다.
    [HttpServletRequest] 객체 메소드
        String getParameter( "파라미터명" )
            =>  [요청 메시지] 안에 담긴 [파라미터명]에 대응하는 [파라미터값]을 String 형으로 리턴한다.
                [파라미터명]이 없을 경우 에러발생하지 않고 null 값이 리턴됨.
                동일한 [파라미터명]이 2개 이상일 경우 첫 번쨰의 파라미터명의 파라미터값만 리턴한다.
        String[] getParameterValues( "파라미터명" )
            =>  [요청 메시지] 안의 파라미터명에 대응하는 파라미터값을 String[] 형으로 리턴한다.
                주로 checkbox 에서 체크된 데이터를 받아올 때 사용하는 메소드이다.
                checkbox 입력 양식이 2개 이상 있을 경우 name값이 동일하고 value 값이 다르다.
        void setAttribute( "키값문자열", 저장객체)
            => [키값문자열]에 [저장객체]를 연결하여 저장한다. HashMap 객체와 동일한 역활을 한다.
                매개변수로 전달되는 저장객체는 주로 DB연동 결과물이다.

                    DB연동이 iusert, update, delete 일 경우 저장 객체는 정수이다.
                    DB연동이 select 일 경우 검색 결과에 따라 아래 처럼 다르다.
                        1행 1열 검색된 경우 =>  DB연동 결과물은 정수 또는 실수 또는 String 이다.
                        1행 n열 검색된 경우 =>  DB연동 결과물은 HashMap 객체이다.
                        n행 1열 검색된 경우 =>  DB연동 결과물은 ArrayList, linkedList, 배열 객체이다
                        n행 m열 검색된 경우 =>  DB연동 결과물은 List<Map<String,String>>
        Object getAttribute( "키값문자열" )
            =>  setAttribute( "키값문자열", 저장객체 )로 저장된 [저장객체]를 Object 타입으로 리턴한다.
        void removeAttribute( "키값문자열" )
            =>  setAttribute( "키값문자열", 저장객체 )로 저장된 [저장객체]를 삭제한다.
        HttpSession getSession()
            =>  HttpSession 객체의 메위주를 리턴한다.
        Cookie[] getCookies()
            =>  Cookie 객체가 저장된 배열 객체를 리턴한다.
                Cookie 객체란?
                    웹브라우저가 웹서버에게 보낸 [요청 메시지] 안에 저장된 쿠키값을 관리하는 객체이다.
                    1개의쿠키값을 1개의 Cookie객체가 관리한다.
		StringBuffer getRequestURL( ) 
			=>  웹브라우저가 웹서버에 접속할 때 사용한 자원의 풀 주소 StringBuffer 형으로 리턴한다.
			    즉 아래 같은 웹서버 자원을 찾기 위한 전체 주소
                        <예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
			StringBuffer 객체란?
				String 객체 처럼 문자열을 관리하는 객체이다.
		String getRequestURI( )
			=>  URL 중에   :웹서버포트번호   이후의 주소를 String 으로 리턴한다.
                        <예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명     중에
			     /웹서버의호출자원명    이 바로 URI  이다
			<주의>URI 는 /  로 시작한다.
        String getContextPath(  )
            =>  웹브라우저가 접속하는 웹서버의 [컨텍스트루트명]을 문자열로 리턴.
                컨텍스트루트명 은 프로젝트명을 의미한다.
                하나의 웹서버 안에 2개 이상의 프로젝트가 존재하도록 설계한다면
                아래와 같은 URL 주소로 접속해야한다.
                        http://서버의도메인주소:웹서버포트번호/프로젝트명1/웹서버의호출자원명
                        http://서버의도메인주소:웹서버포트번호/프로젝트명2/웹서버의호출자원명
                만약 하나의 웹서버 안에 1개만의 프로젝트가 존재한다면 프로젝트명이 생략될수 있다.
                이때 컨텍스트루트명은 생략됐다고 없어지는게 아니라 / 가 된다.(프로젝트의 루트 폴더를 의미.)
        String getServerName(  )
            =>  웹서버의 도메인명을 문자열로 리턴.
                        <예> http://www.naver.com 에서
                            getServerName() 메소드 호출 시 www.naver.com 이 리턴된다.
        String getRemoteAddr(  )
            =>  웹서버에 접속한 클라이언트의 IP주소를 문자열로 리턴.
        int getServerPort(  )
            =>  웹서버가 사용하는 포트 번호를 리턴. <예>8088
        void setCharacterEncoding( "문자셋" )
            =>  클라이언트가 전송한 [파라미터값]의 인코딩 방식을 설정한다.
                즉 무슨 인코딩 방식으로 인코딩했는지 설정을 해줘야 디코딩을 해서 원래 문자열로 복원할수 있다.
                <참고>Spring MVC에서는 이 메소드를 호출하지 않는다. 개발자의 간단히 설정만 해주면
                        Spring framework 가 알아서 해준다.
                        Model1 또는 Model2 방식의 개발에서는 반드시 개발자가 코딩해서 호출하는 메소드이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문6> [웹서버]가 [웹브라우저]로 보내는 [응답메시지]를 관리하는 놈.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    [HttpServletResponse] 객체이다. 웹서버에 지원해주는 객체이다.

    [HttpServletResponse] 객체 메소드
        void sendRedirect( "URL주소" )
            =>  클라이언트의 웹브라우저에게 지정한 URL로 페이지로 이동을 요청한다.
            =>  sendRedirect 메소드 호출되면 [응답메시지]에 301 이란 상태정보가 저장되고
                이 [응답 메시지]를 받은 웹브라우저는 바로 매개변수로 전해준 URL주소로 웹서버에 재접속한다.
                <주의> 이때 웹브라우저는 먼저 [응답 메시지]안의 HTML 소스를 모두 실행한 후 이 URL 주소로 웹서버에 재좁속한다.
        void setContentType( type )
            =>  [응답 메시지]에 저장할 [HTML 소스의] [문서종류], [문자셋]을 지정한다.
            =>  <예> response.setContentType("text/html;charset=UTF-8")
                <참고>Spring MVC 패턴사용시 개발자가 호출하지 않아도 Spring MVC 쪽에서 알아서 세팅 해준다.
        void addCookie( Cookie cookie )
            =>  매개변수로 전해준 Cookie 객체가 소유한 [쿠키명]과 [쿠키값]을 [응답 메시지]에 저장한다.
                추후 [응답 메시지]를 받은 웹브라우저는 이 [쿠키명]과 [쿠키값]을 클라이언트 쪽에 파일로 저장한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문7> 네이버에 로그인 후, 다른 사이트를 갔다가 와도 로그인이 유지되어 있다. 어떻게 그럴수 있을까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    [웹브라우저]와 [웹서버]의 [연결 상태]를 관리하는 객체 때문이다.
    바로 HttpSession 객체이다. 웹서버에서 지원해주는 객체이다.
    [웹브라우저]와 [웹서버]의 [연결 상태]를 세션(=Session)이라고 부른다.
    [웹브라우저]와 [웹서버]의 [연결 상태]를 관리하는 원리
        <1>[클라이언트]가 종료된 [웹브라우저]를 실행 한 후 URL 을 입력하고 [웹서버]에 접속한다.
        <2>[웹서버]가 [HttpSession 객체]를 생성한다. [HttpSession 객체]는 [고유 아이디]를 가지고 있따.
            필요에 따라 개발자 코딩에 의해 [HttpSession 객체]에 원하는 데이터를 저장한다.
        <3>[웹서버]가 [응답 메시지]를 전송한다.
            이때 [응답 메시지]에는 [HttpSession 객체]의 [고유 아이디]가 쿠키로 저장되어 있다.
        <4>[웹브라우저]가 [응답 메시지] 받고 [응답 메시지]안의 [고유 아이디]가 저장된 쿠키를 꺼내서 메모리 공간에 저장시킨다.
            원래 쿠키값은 파일로 저장되는데 [고유 아이디]가 저장된 쿠키는 웹브라우저의 메모리 공간에 저장된다.
            메모리 공간에 저장된다는 말은 웹브라우저가 종료되면 쿠키값도 삭제된다는 의미이다.
        <5>[클라이언트]의 [웹브라우저]가 URL을 입력하고 [요청 메시지]를 가지고 [웹서버]에 재접속한다.
            이때 [요청 메시지]에는 쿠키로 저장된 [고유 아이디]가 들어 있다.
            만약 [요청 메시지]에는 쿠키로 저장된 [고유 아이디]가 없다면 <2> 절차로 돌아간다.
            만약 [웹서버]안의 [고유 아이디]를 가진 HttpSession 객체가 없다면 <2> 절차로 돌아간다.
            만약 [웹서버]안의 [고유 아이디]를 가진 HttpSession 객체가 수명이 다해 제거 된다면 <2> 절차로 돌아간다.
            HttpSession 객체의 수명은 코딩에 의해 설정된다.
        <6>[웹서버]는 [요청 메시지]안의 [고유 아이디] 쿠키값을 꺼내어 이 [고유 아이디]를 가진 HttpSession 객체를 찾아 대응시킨다.
            [HttpSession 객체]에서 <2>에서 개발자 코딩에 의해 저장된 데이터를 꺼낸다.
    [HttpSession]객체 메소드
        void setAttribute("키값문자열", 저장객체)
            =>  [키값문자열]에 [저장객체]를 연결하여 저장한다.
            =>  HttpServletRequest 객체의 setArrtibute 메소드와 동일한 기능을 가진다.
            =>  주로 DB 연동 결과물을 저장한다.
            =>  주로 추후 재 접속시 사용할 데이터 저장할때 호출하는 메소드이다.
        Object getAttribute("키값문자열")
            =>  setAttribute("키값문자열", 저장객체) 메소드 호출로 저장된 객체를 꺼낼 때 호출되는 메소드이다.
            =>  HttpServletRequest 객체의 getAttribute 메소드와 동일한 기능을 가진다.
        void removeAttribute("키값문자열")
            =>  setAttribute("키값문자열", 저장객체) 메소드 호출로 저장된 객체를 삭제하는메소드이다.
        void setMaxInactiveInterval(int second)
            =>  클라이언트의 재 접속이 없을 때 HttpSession 객체의 존재 수명을 초단위로 설정. 기본값은 30분.
        String getId( )
            =>  HttpSession 객체에 부여된 [고유 아이디]를 반환한다.
        등등
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문8> Model1 패턴으로 개발된 프로젝트에서 [웹브라우저]와 [웹서버]의 통신 과정을 상세히 써주삼.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    (1) 클라이언트 웹브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹서버에 접속한다.
    (2) [웹서버]가 HttpServletRequest, HttpServletResponse, HttpSession 객체를 생성한다.
        재 접속이라면 HttpSession 객체가 생성 안될수 있다.
    (3) [웹서버]에서 [URL 주소]에 있는 xxx.jsp 파일을 호출하여 xxx.jsp 파일 안에서 필요에 따라 아래와 같은 일들을 진행한다.
        [요청 메시지] 안의 파라미터값 또는 쿠키값을 꺼내어 DB연동을 하고 얻은 결과물을 꺼내어 문자열로 표현하여 HTML 태그 사이에 삽입한다.
        HttpSession 객체에 이전 접속 시 저장한 데이터가 있으면 꺼내서 원하는 작업을 한다.
        클라이언트에게 보낼 쿠키명과 쿠키값을 Cookie 객체에 저장하고 Cookie 객체를 HttpServletResponse 객체에 저장한다.
        <참고>DB 연동은 jsp 파일 안에서 하지 않고 [DB 연동 자바 객체(=DAO객체)]에 넘길수도 있다.
        <참고>DAO   =>  Data Access Object DB연동 기능의 메소드를 가진 자바 객체를 지칭한다. <<< 입사시험 문제이다!
        <참고>DTO   =>  Data Transfer Object DB연동시 사용되는 다량의 데이터를 관리하는 자바 객체이다. <<< 입사시험 문제이다.
                        private 리턴형 xxx; public void setXxx(~){~}; public 리턴형 getXxx(~){~]; 가 한쌍으로 패턴이다. 이 패턴을 지켜줘야한다. 이패턴은 n개 쌍이 존재.
                        Spring MVC 패턴 개발에서는 아주아주아주 중요한 역활을 한다.
	(4) [웹서버]가 [응답 메시지] 준비한다.
		xxx.jsp 파일을 호출의 실행 결과인 [HTML 소스]를 [응답 메시지]에 저장한다.
		HttpServletResponse 객체가 소유한 Cookie 객체에서 [쿠키명과 쿠키값]을 꺼내어 [응답 메시지]에 저장한다.
		자원의 호출 성공 여부를 저장한다. 웹브라우저의 [재 접속 여부]를 저장한다.
		기타 데이터를 응답 메시지에 저장한다.
	(5) [웹서버]가 웹브라우저에게 [응답 메시지]를 전송한다.
	(6) 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
		만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
		만약 [재 접속 여부]가 있다면 웹서버에 접속을 시도한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문9> Model2 패턴으로 개발된 프로젝트에서 [웹브라우저]와 [웹서버]의 통신 과정을 상세히 써주삼.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    (1) 클라이언트의 웹브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
        <참고> 자원명인 xxx.do 는 실존하지 않는 가짜 자원명으로 xxx, xxx.html, xxx action 등으로 표기 할수 있다.
    (2) [웹서버]가 HttpServletRequest, HttpServletResponse, HttpSession 객체를 생성한다.
        재 접속이라면 HttpSession 객체가 생성 안될수 있다.
	(3) [웹서버]가 [Servlet 객체]의
	    doGet(HttpServletRequest request, HttpServletRespose respose) 메소드
	    또는
	    doPost(HttpServletRequest request, HttpServletRespose respose) 메소드
	    를 호출해서 아래 코딩이 실행된다.
            1. [URL 주소]에 대응하는 자바 객체(=JavaBean)의 특정 메소드를 호출하여 아래 일들을 하고 JSP 페이지명을 문자열로 받는다.
                요청메시지 안의 파라미터값 또는 쿠키값을 꺼내어 DB 연동을 하고
				DB 연동 결과물을 HttpServletRequest 객체 또는 HttpSession 객체에 저장한다.
    			HttpSession 객체에 이전 접속 시 저장한 데이터가 있으면 꺼내서 원하는 작없을 한다.
	    		클라이트에게 보낼 쿠키명과 쿠키값을 Cookie 객체에 저장하고 Cookie 객체 HttpServletRespnse 객체에 저장한다.
            2. 리턴받은 문자열 "xxx.jsp" 파일을 찾아서 호출하여 xxx.jsp 파일 안에서 아래와 같은 일을 진행한다.
                HttpServletRequest 또는 HttpSession 객체에서 DB연동 결과물을 꺼내어 문자열로 표현하여 HTML 태그 사이에 삽입한다.
                이때 DB연동 결과물을 꺼내어 문자열로 표현할때 [자바]를 쓰거나 [커스텀 태그]와 [EL]을 사용한다.
                [자바]를 쓰면 html 과 자바코드가 섞여있어 유지 보수가 힘들고 하나라도 에러가 발생하면 화면 전체가 출력되지 않는다
	    		[커스텀 태그]와 [EL] 을 사용하면 에러가 발생하면 에러난 부분만 출력안되고 나머지는 모두 출력된다
                -----------------------------------------------------------------------
                <예> uid 라는 파라미터명에 해당하는 파라미터값을 꺼내서 div 태그 사이에 삽입하기
                -----------------------------------------------------------------------
                    -----------------------
                    자바 코드를 쓰는 경우
                    -----------------------
                        <div> <%out.print( request.getParameter("uid") );%> </div>
                    -----------------------
                    EL 을 사용 경우
                    -----------------------
                        <예> <div> ${param.uid} </div>
            4 [웹서버]가 [응답 메시지] 준비한다.
            5 [웹서버]가 웹브라우저에게 [응답 메시지]를 전송한다.
            6 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
                만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
                만약 [재 접속 여부]가 있다면 웹서버에 접속을 시도한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문10> 현재 대기업이나 공기업 프로젝트에서 제일 많이 사용하는
        Spring MVC 패턴으로 개발된 프로젝트에서 [웹브라우저]와 [웹서버]의 통신 과정을 상세히 써주삼.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    (1) 클라이언트의 웹브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
        <참고> 자원명인 xxx.do 는 실존하지 않는 가짜 자원명으로 xxx, xxx.html, xxx action 등으로 표기 할수 있다.
    (2) [웹서버]가 HttpServletRequest, HttpServletResponse, HttpSession 객체를 생성한다.
    (3) [웹서버]가 Spring 이 제공하는 DispatcherServlet 객체에 접속한다.
    (4) @Controller 어노테이션이 붙은 객체 안의 @RequestMapping("/xxx.do")가 붙은 메소드 xxx1을 호출하고 ModelAndView 객체를 리턴한다.
        =>  @RequestMapping("/xxx.do")가 붙은 메소드 안에서 일어나는 일
                @Service 와 @Transactional 어노테이션이 붙은 객체 안의 xxx2 메소드를 호출하여 DB 연동 결과물을 얻어
                ModelAndView 객체 또는 HttpSession 객체에 저장한다.
                ModelAndView 객체에 저장된 DB연동 결과는 HttpServletRequest 객체에 저장된다.
                만약 재 접속이라면 이전 접속 시 HttpSession 객체에 저장한 데이터를 꺼내어 원하는 작업을 한다.
                만약 클라이언트에게 보낼 쿠키가 있다면 쿠키명과 쿠키값을 Cookie 객체에 저장하고
                Cookie 객체 HttpServletResponse 객체에 저장한다.
                만약 업로드할 파일이 있다면 파일 업로드를 진행한다.
                JSP 페이지명 을 문자열로 ModelAndView 객체에 저장한다.
                ModelAndView 객체를 리턴한다.   => DB연동 결과와 호출할 JSP 페이지명이 들어있다.
        =>  @RequestMapping("/xxx.do") 가 붙은 메소드 안에서 DB연동 시 실행 과정
                @RequestMapping("/xxx.do") 가 붙은 xxx1 메소드
                    DB연동 지시                                                                      ModelAndView 객체에
                        ↓                                                                            DB연동지시 결과와 "xxx.jsp" 저장
                        ↓                                                                                     ↑ 
                        ↓                                                                                     ↑ 
                        ↓                                                                             DB 연동 지시 결과
                    ====================================================================
                    @Service 와 @Transactional 어노테이션 붙은 객체 안의 xxx2 메소드
                    ====================================================================
                    1개의 SQL구문 해당         ↑                1개의 SQL구문 해당         ↑                ~
                      DB 연동 지시 1           ↑                DB 연동 지시 2             ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                 db 연동 지시1 결과        ↓                 db 연동 지시2 결과    ~
                    ====================================================================
                    @Repository 어노테이션이 붙은 객체의 xxx3 메소드
                    ====================================================================
                    1개의 SQL구문 해당         ↑                1개의 SQL구문 해당         ↑                ~
                      DB 연동 지시 1           ↑                DB 연동 지시 2             ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                 db 연동 지시1 결과        ↓                 db 연동 지시2 결과    ~
                    ====================================================================
                    SqlSessionTemplate 객체의 메소드
                    ====================================================================
                    1개의 SQL구문 해당         ↑                1개의 SQL구문 해당         ↑                ~
                      DB 연동 지시 1           ↑                DB 연동 지시 2             ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                 db 연동 지시1 결과        ↓                 db 연동 지시2 결과    ~
                    ====================================================================
                    Connection, ResultSet, PreparedStatement 객체(=JDBC) 객체들
                    ====================================================================
                    1개의 SQL구문 해당         ↑                1개의 SQL구문 해당         ↑                ~
                      DB 연동 지시 1           ↑                DB 연동 지시 2             ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                      ↑                    ↓                      ↑                ~
                        ↓                 db 연동 결과              ↓                 db 연동 결과          ~
                    ====================================================================
                    Oracle DB
                    ====================================================================
    (5) ModelAndView 객체에 저장된 JSP 페이지명 에 해당하는 JSP페이지를 호출한다.
        =>  JSP 패이지 안에서 일어나는 일
                HttpServletRequest 또는 HttpSession 객체에서 DB연동 결과물을 꺼내어 문자열로 표현하여
                HTML 태그 또는 자바스크립트 사이에 삽입한다.
                이때 DB연동 결과물을 꺼내어 문자열로 표현할 때 [자바]를 쓰거나 [커스텀태그와 EL]을 사용한다.
	(6) [웹서버]가 [응답 메시지] 준비한다.
		xxx.jsp 파일을 호출의 실행 결과인 [HTML 소스]를 [응답 메시지]에 저장한다.
		HttpServletRespose 객체가 소유한 Cookie 객체에서 [쿠키명과 쿠키값]을 꺼내어 [응답 메시지]에 저장한다.
		자원의 호출 성공 여부를 저장한다. 웹브라우저의 [재 접속 여부]를 저장한다.
		기타 데이터를 응답 메시지에 저장한다.
    (7) [웹서버]가 웹브라우저에게 [응답 메시지]를 전송한다.
    (8) 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
            만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
            만약 [재 접속 여부]가 있다면 웹서버에 접속을 시도한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문11> 개발 연습용 차원에서 다음과 같은 조건으로 웹서버와 웹프로그래밍 자원 구축하고 싶다.
        무슨 프로그램을 설치해야하나요?
        <조건>  [웹프로그래밍 자원]으로 Java, JSP, 자바스크립트를 사용하고 싶다.
        <조건>  [웹서버]로 Tomcat 을 사용하고 싶다.
        <조건>  [DB]는 Oracle을 사용하고 싶다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    (1) Java JDK 프로그램 설치
            Java 객체가 실행되는 JVM 을 제공한다.
            기본적으로 자주사용되는 class를 제공한다.
            컴파일을 제공한다.
            실행을 해준다.
            기타 등등
    (2) WEB Server 프로그램으로 Tomcat을 설치
            [웹브라우저]로 [요청 메시지]가지고 동시에 접속하는
            다수의 클라이언트를 맞이하고 동시에 [응답 메시지]로 응답한다.
    (3) Oracle 11g 설치
            동시에 접속하는 다수의 [웹프로그램 자원]에게
            동시에 데이터의 입력, 수정, 삭제, 검색을 하게 하고
            그 결과를 리턴한다.
            즉 데이터를 영구 저장하고 관리한다.
    (4) Spring Tool Suite(=STS) 프로그램 설치
            웹프로그래밍 자원(JSP, Java 등)의 코딩을 관리한다.
                =>  코딩하는 공간을 제공한다.
                    에러 코딩을 찾아 문제 해결방법을 제공한다.
            웹프로그래밍 자원 실행 과정에서 필요한 외부 프로그램을 설치/연결하여 외부 프로그램을 사용 가능케한다.
                =>  JDK 의 JVM을 사용 가능케한다.
                    maven을 연결하여 외부 라이브러리(=자바 클래스)의 다운로드/버전/관련된 라이브러리 을 자동 관리해 준다.
                    DB와 연결하여 입력, 수정, 삭제, 검색을 가능하게 한다.
                    기타등등
            웹프로그래밍 자원 실행 과정에서 필요한 외부 라이브러리(=자바 클래스)를 설치/연결하여 외부 라이브러리를 사용 가능케한다.
                =>  JDK를 연결하여 JDK의 기본 라이브러리(=자바 클래스)를 사용 가능케한다.
                    maven을 연결하여 외부 라이브러리의 다운로드/버전/관련된 라이브러리 를 자동 관리 해준다.
            웹서버를 관리한다.
                =>  웹서버의 연결, 웹서버 on/off 등을 할수 있다.
            웹서버 기반으로 웹프로그래밍 자원을 실행하고 결과를 자체 웹브라우저나 도스창에 보여준다.
            웹 개발 후 실제 서비스할 웹서버로 배치할 수 있는 파일로 만들어 준다.
            웹 개발에 사용되는 여러 개발 플랫폼을 [project]라는 형식으로 제공한다.
                Dynamic Web project
                    실제 서비스하는 웹서버와 비슷한 구조로 웹 개발을 사용할 수 있게 한다.
                    단점
                        =>  외부 라이브러리는 개발자 직접 다운받아 저장해야 한다.
                            개발 과정에 필요한 환경정보를 주로 Java또는 JSP 파일 안에서 관리해야한다.
                Spring Legacy project
                    Spring MVC 패턴의 웹 개발을 사용할 수 있게한다.
                    maven 이 외부 라이브러리를 자동 관리해준다.
                    단점
                        =>  환경설정이 매우 방대하고어렵다
                                maven에서 관리할 외부 라이브러리 목록 등록이 복잡하고 방대하다.
                                Spring MVC 패턴에서 사용되는 객체의 정보 등록이 복잡하고 방대하다.
                            외부 웹서버(Tomcat)을 연결해서 사용중 외부 웹서버(Tomcat)로 인한 오류가 많다.
                Spring Stater project
                    Spring MVC 패턴의 웹 개발을 사용할 수 있게한다.
                    Spring boot 라는 플랫폼을 사용할 수 있게 한다.
                    Spring boot 플랫폼 장점
                        환경 설정이 매우 심플하고 쉽다.
                            maven 에서 관리할 외부 라이브러리 목록등록이 간단하다.
                            Spring MVC 패턴에서 사용되는 객체의 정보 등록이 거의 없다.
                        Tomcat 서버가 내장되어 있어 Tomcat 서버를 따로 설치할 필요가 없고
                        Tomcat 서버 실행 시 발생하는 오류도 적다.



Java interface 정의
public, static, final 의 성격을 가진 속성변수와
public, abstract 의 성격을 가진 메소드로 구성된 클래스와는 다른 단위 프로그램이다.