■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제1> ECMA Script (=ES) 가 뭡니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    ECNA 인터내셔널 라는 단체에서 ECMA-262 이란 기술 규격에 의해 정의한 [범용 스크립트 언어]를 의미합니다.
    =======================================================================================
        ▶️<참고>ECMA 인터내셔널 => 정보 통신에 대한 표준을 제정하는 비영리 표준화 기구이다.
    =======================================================================================
	ECMA Script 버전
    =======================================================================================
		ES3(1999년) -> *ES5(2009년) -> *ES6(2015년) -> ES7(2016년) -> ES8(2017년) -> ~
    =======================================================================================
    <참고> ECMA (European Computer Manufacturer's Associates = 유럽 컴퓨터 제조업자 협회) 
    =======================================================================================
    <참고>
        스크립트 언어 특징
            =>  독립적으로 실행되지 않고 다른 언어에 부가 되어 실행된다.
                문법이 간단 편이다.
        Client side Script  =>  자바스크립트, VB스크립트    =>  클라이언트 컴퓨터에서 실행되는 스크립트.
        Server side Script  =>  JSP, ASP, PHP, .NET   =>  서버 컴퓨터에서 실행되는 스크립트.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제2> 자바스크립트 (=자바스크립트 = JS) 란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    ECMA Script(=ES) 사양을 준수하여 만들어진 프로그래밍 언어이다.
    [JavaScript 엔진] 기반 위에서 실행된다.
    =======================================================================================
    Javascript 엔진?
    =======================================================================================
        -   JavaScript 코드를 이해하고 실행하는 프로그램 또는 인터프리터(=해석기)이다.
        -   주로 웹브라우저 소프트웨어에 설치되어 있다.
        -   주로 구형 웹브라우저의 JavaScript 엔진은 주로 ES5 까지만 받아들인다.
        -   <참고> 웹브라우저 별 JavaScript 엔진 이름
            ----------------------------------------
			.V8            => 웹브라우저 Google Chrome 에 내장됨
			.SpiderMonkey  => 웹브라우저 Mozilla Firefox 에 내장됨
			.hakra         => 웹브라우저 Microsoft Edge 에 내장됨
			.등등
			----------------------------------------
    =======================================================================================
    Javascript 가 주로 사용되는 곳
    =======================================================================================
        ▶️   JavaScript 엔진이 설치된 웹브라우저에서 HTML 에 삽입되어 HTML 에 동적인 기능을 부여한다.
        ▶️   JavaScript 엔진과 nodeJS 가 설치된 웹서버에서 클라이언트의 요청을 접수하고, 요청을 처리한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제3> React 란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    Javascript로 만든 웹화면 UI 출력을 위한 전용 라이브러리이다.
    =======================================================================================
        <주의> React는 프레임워크가 아니다.
    =======================================================================================
    페이스북을 개발할 떄 사용한 기술로써 공개 소프트웨어이다.
    =======================================================================================
    =======================================================================================
    리액트에서 사용되는 자바스크립트 특징
    =======================================================================================
		--------------------------------------------------------------------------------
        주로 ES6 문법을 따르는 자바스크립트를 사용한다. ES6 이 ES5 보다 강력한 기능이 있기 때문이다.
		--------------------------------------------------------------------------------
            <참고>Angular, React, vue 와 같은 최신 프레임워크 또는 라이브러리들은 ES6 코딩을 기반으로 하고 있다.
		--------------------------------------------------------------------------------
        현 시점에서 ES6 문법을 따르는 자바스크립트는 구형 웹브라우저에서 실행이 안 되는 경우가 있어
        ES6 따라 코딩한 후 Babel(바벨) 같은 도구를 사용하여 하위버전 ES5으로 변환한다.
		--------------------------------------------------------------------------------
            ▶️ Babel(바벨)   =>  ES6 문법을 하위버전 ES5 문법으로 변환하는 트랜스 파일러 이다.
            ▶️ Webpack(웹팩) =>  SVG 파일과 CSS 파일을 불러와서 사용할 수 있게 하는 SW 이다.
        --------------------------------------------------------------------------------
            <참고> SVG 파일
            이미 데이터를 저장하고 표현하기 위한 파일 형식이다.
            래스터 방식에는 JPEG, GIF, PNG 등이 있다.
            벡터 방식에는 AI, SVG, VML 등이 있다.
            래스터 방식
				픽셀 하나하나에 색채 값을 설정하여 이미지를 구성하는 것으로, 비트맵 방식이라고도 한다. 
				포토샵, 페인터 등에서 사용된다. 
				여러 개의 점과 같은 픽셀들이 모여 이미지를 표현하므로, 픽셀의 수가 많을수록 
				화면의 질이 향상된다. 
				단점
					크기를 확대하거나 축소할 때 이미지의 손실이 생길 수 있다.
					픽셀을 증가시킬수록 파일 용량이 커지게 된다.  
			벡터 방식
				수학식으로 이뤄진 점, 직선, 곡선, 다각형 등으로 이미지를 표현하는 것으로 
				일러스트레이터, 플래시, 폰트랩 등의 프로그램에서 사용된다. 
				장점
					아무리 확대해도 이미지가 선명하게 보인다. 
					래스터 방식에 비해 파일 용량이 작다는 장점이 있다. 
				단점
					색상의 자연스러운 변화나 세밀한 표현이 어렵다.
					과도하게 복잡한 계산이 필요한 이미지의 경우 컴퓨터에 큰 부담을 준다. 
					일러스트레이터와 같은 프로그램에서 열었을 때 로딩 및 편집 속도가 느려질 수 있다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제4> React 사용을 위한 사전 설치 SW는 무엇인가요?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    <설치1> nodeJS 설치
        --------------------------------------------------------------------------------
        다수의 웹브라우저로 접속하는 클라이엍느의 요청을 [자바스크립트]를 사용하여
        접수/처리/응답하는 [웹서버]기능을 가진 SW 이다.
        즉 웹프로그래밍 자원으로 자바스크립트를 사용하는 웹서버 SW 이다.
        --------------------------------------------------------------------------------
            <참고> 자바스크립트가 웹브라우저라는 제약을 벗어나서 nodeJS 가 설치된 곳이라면
                    어디서든지 실행될 수 있다.
        --------------------------------------------------------------------------------
        <참고>nodeJS 를 설치하면 [nodeJS 패키지 매니저 도구]인 [NPM]이 자동 설치된다.
        --------------------------------------------------------------------------------
        <참고>npm을 사용하면 수많은 개발자가 만든 패키지의 자동 설치 및 설치된 패키지의 버전을 관리할 수 있다.
        --------------------------------------------------------------------------------
    <설치2> yarn 설치
        패키지 설치 및 설치된 패키지의 버전을 관리하는 [패키지 관리자 도구]SW 이다.
        yarn은 npm 보다 더 빠르며 효율적인 캐시 시스템과 기타 부가기능을 제공한다.
        yarn 기능
            온라인에서 외부 패키지 다운로드 및 설치.(= React 외부 모듈 설치.)
            React 프로젝트 생성.
            nodeJS 서버의 실행 및 다운. 즉 웹서버를 키고 끌수 있따.
            기타등등.
    <설치3> VSCode 설치
        --------------------------------------------------------------------------------
        자바스크립트 코딩 영역을 제공한다.
        --------------------------------------------------------------------------------
        xxx.js 파일, 기타 각종 파일, 폴더의 생성/삭제/수정을 할수 있다.
        --------------------------------------------------------------------------------
        외부 라이브러리를 검색하고 다운 및 설치는 가능케한다.
        --------------------------------------------------------------------------------
        yarn 의 명령어를 실행할 수 있는 콘솔창을 제공한다.
        --------------------------------------------------------------------------------
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제5> React 사용을 위한 사전 설치 방법은?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    <설치1> nodeJS 설치
    <설치2> yarn 설치
    <설치3> VSCode 설치
        -   설치하고 기본 설정을 한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제6> React 프로젝트를 생성(=웹서버 자원생성)하고
                [nodeJS 웹서버]를 작동하고
                [웹브라우저]에서 [nodeJS 웹서버]에 접근하여 생성한 프로젝트 안의 기본 페이지를 열고 싶다.
                React 프로젝트의 경로는 다음과 같다.
                C:\kosmo\수업자료\react\prj-react
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    <1> VSCode 를 실행한다.
    <2> 콘솔창을 연다
            --VSCode 를 실행한다.
            --상단 메뉴바 Terminal > new Terminal 을 클릭한다.
    <3> 콘솔창에서 yarn 명령어로 prj-react 라는 이름의 리액트 프로젝트를 생성한다.
            콘솔 창에서 프로젝트를 만들 폴더로 접근후 아래 처럼 입력 후 엔터를 친다.
            플젝만들폴더의경로 yarn create react-app prj-react
            플젝만들폴더 안에 prj-react 라는 이름의 react-app 프로젝트를 만든다.
    <4> VSCode 에서 생성한 prj-react 프로젝트 폴더를 연다.
    <5> 생성한 prj-react 프로젝트 를 기반으로 하는 nodeJS 웹서버를 킨다.
            콘솔 창에서 아래 처럼 입력 후 엔터를 친다.
            플젝폴더경로: yarn start
    <6> 웹브라우저를 열고 http://localhost:3000 를 입력하여 이 URL 주소에 대응하는 기본 페이지를 열어본다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제7> React 프로젝트 생성 후 내부의 카테고리 설명?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    프로젝트명
    =======================================================================================
        ㄴ node_modules         =>  외부 라이브러리가 설치되는 폴더이다. 외부 모듈이 저장되는 곳이다.
        --------------------------------------------------------------------------------
        ㄴ public               =>  공용으로 사용되는 자원이 있는 폴더이다.
        --------------------------------------------------------------------------------
        ㄴ src                  =>  웹 프로그램 자원이 있는 폴더이다. xxx.js, xxx.css 이미지 파일 등이 있다.
                                    웹브라우저의 URL 접속 시 대응하여 실행되는 js 파일이 있는 곳이다.
                                    개발자가 만드는 xxx.js, xxx.css 파일이 저장되는 곳이다.
        --------------------------------------------------------------------------------
        ㄴ pakage.json          =>  nodeJS 웹서버 정보, 패키지의 관한 정보와 의존 중인 버전 등을 내포한다.
                                    사용하고 있는 패키지들의 명세서 등을 내포한다.
        --------------------------------------------------------------------------------
        ㄴ yarn.lock            =>  설치된 모듈의 버전을 저장해 어디서나 같은 버전과 구조의 의존성을 갖게함.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제8> [nodeJS 웹서버]에 http:localhost:3000 을 입력하면 이 URL 주소에 대응하는 기본 페이지가 열린다.
                어디에 있는 자원이 실행된 것인가?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    프로젝트 생성 후 처음 [nodeJS 웹서버]에 http://localhost:3000 로 접근하면
    프로젝트명 > src > index.js 실행되고 그 안에서
    프로젝트명 > src > app.js 를 실행하여 그 결과를 열어보게 된다.
    즉 정리하면 app.js 를 실행하여 그 결과를 열어보게 된다 라고 생각해도 좋다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제9> 프로젝트명 > src > naver > Test.js 를 만들고
                http://localhost:3000/naver/test 라고 입력하여 이 자원을 실행하여 열려면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    <1> 프로젝트명 > src > Test.js 파일을 아래 처럼 생성한다.
    =======================================================================================
        --------------------------------------------------------------------------------
        프로젝트명 > src > naver > Test.js
        --------------------------------------------------------------------------------
        import React, { Component } from 'react';

        const Test = () => {
            return(
                <div>
                    방가
                </div>
            )
        }
    =======================================================================================
    <2> VSCode 에서 react-router-dom 라는 모듈을 다운 받는다.
    =======================================================================================
        콘솔 창에서 아래 처럼 입력 후 엔터를 친다.
        --------------------------------------------------------------------------------
        yarn add react-router-dom
        --------------------------------------------------------------------------------
    =======================================================================================
    <3> 프로젝트명 > src > index.js 파일에서 설치된 react-router-dom 라는 모듈을 수입한다.
    =======================================================================================
        프로젝트명 > src > index.js 파일을 열고 상단에 아래 코딩을 삽입한다.
        --------------------------------------------------------------------------------
        import { BrowserRouter } from 'react-router-dom';
    =======================================================================================
    <4> 프로젝트명 > src > index.js 파일에서 아래 부분을 수정한다.
    =======================================================================================
        --------------------------------------------------------------------------------
        <React.StrictMode>
            <App/>
        </React.StrictMode>
        --------------------------------------------------------------------------------
        ▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽
        --------------------------------------------------------------------------------
        <BrowserRouter>
            <App/>
        </BrowserRouter>
        --------------------------------------------------------------------------------
    =======================================================================================
    <5> 프로젝트명 > src > App.js 파일에서 아래 처럼 수정 한다
    =======================================================================================
        --------------------------------------------------------------------------------
        프로젝트명 > src > App.js
        --------------------------------------------------------------------------------
        import React, { Component } from 'react';
        import { Route } from 'react-router-dom';
        import Test from './naver/Test';

        const App = () => {
            return (
                <div>
                    <Route path ="/naver/test" component={test} />
                </div>
            )
        }
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제10>  자바에서는 [클래스]와 [인터페이스] 라는 [단위 프로그램]이 있는데
                React 에서 사용되는 [단위 프로그램] 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    클래스 컴포넌트
    =======================================================================================
        자바의 클래스와 유사한 모양을 가진다.
        사용자 정의 클래스 컴포넌트는 Component 라는 내장 클래스를 상속해야 한다.
        생성자, 메소드, 속성변수로 구성되어 있다.
    =======================================================================================
    함수 컴포넌트
    =======================================================================================
        실행 구문 영역에 블록({~}) 으로 감싸고 이름을 붙여 선언한다.
        클래스 컴포넌트 처럼 생성자, 메소드, 속성변수 같은 구성요소가 없다.
        그냥 실행구문만 있다. 즉 변수 선언, 타 함수 호출, 타 객체의 메소드/속성변수 호출 등으로만 구성됨.
        --------------------------------------------------------------------------------
        <참고> 리액트 제작자들은 함수 컴포넌트의 사용을 권유하고 있다.
        --------------------------------------------------------------------------------
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제11> 클래스 컴포넌트의 선언 형식은?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    클래스컴포넌트명.js
    =======================================================================================
        // 필수 외부 컴포넌트 수입하기.
        import React, {Component} from 'react';     //  1개 선언
        // 필요한 외부 컴포넌트 수입하기.
        import ~ ;                                  //  0개 이상 선언
        // 클래스 컴포넌트 선언하기.
        class 클래스컴포넌트명 extends Component {
            //  Constructor 생성자 0~1개 선언.
            constructor(props) {
                super(props);
                ~
            }


            //  리액트 제공 송성변수 state 선언. 0~1개 선언.
            state = 데이터;


            //  사용자 정의 속성변수 선언
            사용자정의속성변수명 = 데이터;


            //  사용자 정의 메소드 선언.
            사용자 정의 메소드명 ([매개변수명]) {
                실행구문;
            }


            //render 메소드 필수 1개 선언.
            render() {
                JSX 문법 코딩
                // 지역변수 0개 이상 선언.
                const 지역변수명 = 데이터;

                // return 구문 필수 선언.
                return(
                    JSX 문법 코딩
                )
            }
        }
        //  외부에서 현 JS 파일 안의 컴포넌트를 수입할 경우 수출할 컴포넌트명 주기.
        export default 수출할 컴포넌트 이름;        //  1개 이상 선언
    =======================================================================================
    JSX( = JavaScript XML )
    =======================================================================================
    =======================================================================================
    constructor(props) { ~ }
    =======================================================================================
        클래스컴포넌트를 호출할 때 제일 먼저 실행된다.
        props 매개변수에는 호출자가 호출하면서 넘겨주는 [사용자 정의 객체] 가 들어 있따.
        무조건 첫줄에는 부모의 생성자를 호출하는 super(props)가 있다.
    =======================================================================================
    state *****
    =======================================================================================
        --------------------------------------------------------------------------------
        0~1개 선언 가능한 리액트가 제공하는 속성변수이다. <주의> 선언 시 this. 를 붙이지 않는다.
        --------------------------------------------------------------------------------
        state 변수 선언 후 데이터 갱신 방법
        --------------------------------------------------------------------------------
            this.setState( 갱신 데이터 );
            <주의> 절대 state = 갱신데이터; 를 쓰면 안된다.
        --------------------------------------------------------------------------------
        this.setState(갱신데이터 ) 호출로 state 변수 내용이 갱신되면 render() 메소드를 재호출된다.
        --------------------------------------------------------------------------------
    =======================================================================================
    render() { ~ }
    =======================================================================================
        --------------------------------------------------------------------------------
        리액트가 제공하는 필수 1개 선언 메소드이다. <주의> this. 을 붙이지 않는다.
        --------------------------------------------------------------------------------
        retnder 메소드 안의 return 구문 안의 [JSX 문법 코딩] 실행 결과가 웹화면에 출력된다.
        --------------------------------------------------------------------------------
        JSX 문법은 주로 HTML 태그, 사용자 정의 태그, [자스데이터]로 구성되어 있따.
        --------------------------------------------------------------------------------
        <참고>JSX( = JavaScript XML )
        --------------------------------------------------------------------------------
        <참고>HTML 과 XML 비교
        --------------------------------------------------------------------------------
            HTML
                정해진 태그만 사용한다.
            XML
                사용자 정의 태그만 사용한다.
                사용용도
                    이기종 SW끼리 DB의 데이터를 XML로 표현해서 주고 받을 때
                    환경설정 할 때
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제12> 함수 컴포넌트의 선언 형식은?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    함수컴포넌트명.js
    =======================================================================================
        // 필요한 외부 컴포넌트 수입하기
        import ~

        //함수 컴포넌트 선언하기.
        const 함수컴포넌트명 = ( [매개변수명] ) =>  {

            // useState 내장 함수 리턴값 저장 [지역변수] 0개 이상 선언.
            const [지역변수명1, 지역변수명2] = useState( 데이터 );

            // 지역 변수 0개 이상 선언.
            const 지역변수명 = 데이터;


            // return 구문 필수 1개 선언.

            return(     //  <- return메소드가 아니라 그냥 return 이다. 구문이 너무 길어서 () 로 묶은 것일 뿐이다.
                JSX 문법 코딩
            )

        }
        // 외부에서 현 JS 파일 안의 컴포넌트를 수입할 경우 수출할 컴포넌트명 주기.
        export ~ ;      //  1개 이상 선언
        --------------------------------------------------------------------------------
        return 구문 안의 [JSX 문법 코딩] 실행 결과가 웹화면에 출력된다.
        --------------------------------------------------------------------------------
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제13> 리액트에서 사용되는 자바스크립트에서 변수 선언 시 왼쪽에 붙이는 var, let, const 의 의미는?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    =======================================================================================
    종류                    사용 가능 영역                  초기화 이후 갱신 가능 여부
    =======================================================================================
    var                        함수 내부                            가능
    --------------------------------------------------------------------------------
    let                     블록({~}) 내부                          가능
    --------------------------------------------------------------------------------
    const                   블록({~}) 내부                         불가능           
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<리액트 문제14> 리액트에서 사용되는 자바스크립트에서 함수 형태를 정리한다면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    --------------------------------------------------------------------------------
    일반 함수
    --------------------------------------------------------------------------------
        function 함수명 ( [매개변수명] ){
            실행구문;
            [return 리턴값;]
        }
    --------------------------------------------------------------------------------
    클래스 컴포넌트 내부에 선언된 메소드 모양 함수
    --------------------------------------------------------------------------------
        함수명( [매개변수명] ){
            실행구문;
            [return 리턴값;]
        }
    --------------------------------------------------------------------------------
    변수 안의 익명함수
    --------------------------------------------------------------------------------
        변수명 = function( [매개변수명] ) {
            실행구문;
            [return 리턴값;]
        }
    --------------------------------------------------------------------------------
    변수 안의 화살표 함수 형식 1    (매개변수 0개 이상, 실행구문 있고 리턴값이 0~1개 이상인 경우)
    --------------------------------------------------------------------------------
        변수명 = ( [매개변수명] ) => {
            실행구문;
            [return 리턴값;]
        }
    --------------------------------------------------------------------------------
    변수 안의 화살표 함수 형식 2    (매개변수 1개, 실행구문 있고 리턴값이 0~1개 이상인 경우)
    --------------------------------------------------------------------------------
        변수명 = 매개변수명 => {
            실행구문;
            [return 리턴값;]
        }
    --------------------------------------------------------------------------------
    변수 안의 화살표 함수 형식 2    (매개변수 0개 이상, 실행구문 없고 리턴값만 있을 경우)
    --------------------------------------------------------------------------------
        변수명 = ( [매개변수명] ) => 객체아닌리턴값;
        변수명 = ( [매개변수명] ) => (객체리턴값);
    --------------------------------------------------------------------------------
    변수 안의 화살표 함수 형식 3    (매개변수 1개, 실행구문 없고 리턴값만 있을 경우)
    --------------------------------------------------------------------------------
        변수명 = 매개변수명 => 객체아닌리턴값;
        변수명 = 매개변수명 => (객체리턴값);
        