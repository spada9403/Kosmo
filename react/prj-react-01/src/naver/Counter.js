// 프로젝트명/node_modules/react 안에 default 가 붙어 수출하는 놈을 수입해서
//   현재 파일 안에서 React 란 이름으로 사용함
// 프로젝트명/node_modules/react 안에 default 가 '안' 붙어 수출하는 놈 Component 수입해서
//   현재 파일 안에서 Component 란 이름으로 사용함
// <참고> 아래 수입 코드는 클래스 컴포넌트가 선언되는 js 파일안에서는 필수로 수입되는 놈들이다.
import React, { Component } from "react";

// 리액트의 단위 프로그램중 하나인 [클래스 컴포넌트 ] 선언하기
// <참고> [클래스 컴포넌트]는 자바의 클래스와 유사한 형태를 가지고 있다.
// <주의> [클래스 컴포넌트]는 반드시 Component 클래스를 상속해야한다.
class Counter extends Component {
  // 사용자 정의 속성변수 선언하기.
  // <주의>사용자 정의 속성변수 선언 시 this. 을 붙이지 않는다.
  // <주의>호출시 this. 을 붙인다.
  default_number = 1;
  // 리액트가 제공하는 state 속성변수 선언하고 [사용자 정의 객체]를 저장하기
  //    클래스 컴포넌트 안에서 리액트가 제공하는 state 속성변수 특징
  //        => state 속성변수의 갱신은 리액트가 제공하는 setState 메소드 호출로만 가능하다.
  //        => setState 메소드 호출로 state 속성변수 안의 값이 갱신되면 render 메소드가 재호출 된다.
  //        => state 속성변수 호출할 경우 this. 을 붙인다.
  state = {
    start_number: this.default_number,
    now_number: this.default_number,
  };
  // 사용자 정의 속성변수 add 에 화살표 함수 저장하기
  add = () => {
    // setState 라는 메소드 호출하여
    // state 변수 안의 저장된 사용자 정의 객체 안의 속성변수 now_number 안의 데이터를
    // this.state.now_number + 1 의 실행결과로 갱신하라
    // <주의> state 변수 안의 저장된 사용자 정의 객체가
    //          {now_number : this.state.now_number + 1} 로 갱신 된게 절대 아니라
    //          now_number 만 즉 부분 갱신만 진행된 것이다.
    this.setState({ now_number: this.state.now_number + 1 });
  };
  // 사용자 정의 속성변수 minus 에 화살표 함수 저장하기
  minus = () => {
    this.setState({ now_number: this.state.now_number - 1 });
  };
  // 사용자 정의 속성변수 init 에 화살표 함수 저장하기
  init = () => {
    this.setState({ now_number: this.default_number });
  };
  // render 메소드 필수 1개 선언.
  render() {
    const { start_number, now_number } = this.state;

    return (
      <>
        <center>
          <span>시작값 : {start_number}</span>
          <span>현재값 : {now_number}</span>
          <button onClick={this.add}>+</button>
          <button onClick={this.minus}>-</button>
          <button onClick={this.init}>초기화</button>
        </center>
      </>
    );
  }
}

// 현재 이 파일 안에서 기본적으로 수출할 컴포넌트 지정하기.
export default Counter;

/*
<문제> 위에 있는 Counter 클래스 컴포넌트 지금 어디서 누가 호출했나?
    URL 주소가 ~:3000/naver/counter 일 경우
    App.js 에서 아래 코딩에 의해 호출되었다.
    <Route path="/naver/counter" component="Counter" />
<문제> 위에 있는 Counter 클래스 컴포넌트가 호출되면(=실행되면) 어떤 일이 벌어지나?
    => 생성자가 있으면 생성자를 호출한다.
    => 속성변수하고 메소드를 읽어 들인다.
    => render 메소드를 호출한다.
    => render 메소드가 리턴하는 JSX 문법을 [화면 출력 기능의 자바스크립트]로 바꾸고 클라이언트 브라우저로 전송한다.
    => 클라이언트 브라우저가 [화면 출력 기능의 자바스크립트]을 읽어 들여 화면에 출력한다.
    **************************************************************************************************
    => 만약 이벤트가 발생하여 자스 코딩이 실행되는 과정에서 setState 메소드가 호출되어
        state 속성변수 안의 값이 변경되면 render 메소드를 재 호출한다.
        재 호출되어 출력되는 컨텐츠가 이전 화면 컨텐츠를 모두 갱신하는게 아니라
        달라진 부분만 갱신시켜 버린다.
    **************************************************************************************************
        즉 화면에 부분 변화를 일으키고 싶으면 이벤트에 의해 실행되는
        자스 코딩안에 [setState 메소드]가 호출되게 만들어 버리면 된다.
        리액트가 아닌 HTML 이나 JSP 에서의 자스에서도 이런 효과를 볼수는 있지만
        리액트보다는 일부 화면 변화시 부하가 훨씬 더 많이 걸린다
<문제> const {start_number, now_number } = this.state; 코딩은 무슨 의미인가요?
    지역변수명과 일치하는 사용자 정의 객체의 속성변수 안의 값을 지역변수에 저장하기.
        달리 표현하면 아래와 같다.
        const start_number = this.state.start_number;
        const now_number = this.state.now_number;
<문제> <br/> 을 <br> 로 고치면?
    완벽한 에러가 발생한다. 화면에 출력되지 않을 정도의 에러가 발생한다.
    JSX 문법의 1순위
        모든 태그는 여는 태그가 있으면 후에 닫는 태그가 반드시 꼭 나와야한다.
        여는 태그만 있는 태그는 여는 태그 마지막에 / 가 나와야한다.
    현재 <br> 은 여는 태그만 있는 태그이므로 <br/> 라고 해야 에러가 없다.
<문제> <> 와 </> 를 생략하면?
    에러 없다.
    <> 와 </> 를 생략하면 center 태그 하나가 최상위 태그가 되므로 에러가 없다.
<문제> const, var, let 이게 무엇인가요?
    변수 선언 시 변수 외쪽에 붙이는 키워드이다.
    사용범위, 갱신 여부, 중복 선언 여부에 관한 설정이다.
    ====================================================================================================================================================
    종류                    사용 가능 영역                  초기화 이후 갱신 가능 여부                  동일한 변수 중복 선언 가능 여부
    ====================================================================================================================================================
    var                        함수 내부                            가능                                               가능
    ----------------------------------------------------------------------------------------------------------------------------------------------------
    let                     블록({~}) 내부                          가능                                              불가능
    ----------------------------------------------------------------------------------------------------------------------------------------------------
    const                   블록({~}) 내부                         불가능                                             불가능           
<문제> 태그에 이벤트가 발생하면 자스 코딩을 실행하고 싶다.
        react 에서는 어떡해 설정해야 하나?
    <태그명 on이벤트명={실행구문을 내포한 화살표 함수} >
    <주의> 아래 코딩처럼 하면 안됩니다.
        <태그명 on이벤트명={실행구문} >                          => 화살표 함수가 아니므로 X
        <태그명 on이벤트명="실행구문을 내포한 화살표 함수" >     => JSX문법에서 자스는 {} 안에 넣어야 하므로 X
    <주의> 이벤트명은 대문자로 시작해야함. 즉 카멜 표기법 준수 해야함.
*/
