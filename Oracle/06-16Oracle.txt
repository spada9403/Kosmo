WHERE => 행을 골라낼때.
ORDER BY => 행의 순서를 정렬.
******* [주의] where 이 항상 먼저 나오고 order by가 뒤에 나온다.

※ 페이징 처리란? : 예) 3만개의 게시판이 있는데, 한꺼번에 보여주는것이아닌, 약20개씩 보여주는것. 로직이 많이 들어가있다.
					페이징 처리 처럼 오라클에서도 데이터를 보내줄때 한꺼번에 다 주는것이 아니라 필요한것만 골라서 보내준다.
					
WHERE 문 뒤엔 항상 비교연산자|논리연산자 온다.
	<질문>!!
			1. ~ WHERE dep_no == 10;
			2. ~ WHERE salary => 3000;
	둘중 문법에 맞지 않게 쓴 애들 누구야? => 1,2번 둘다.
	
	1. 오라클에는 ==이 없다. 비교연산자는 = 로 쓴다.
	2. 부등호는 항상 이퀄( = ) 보다 앞에 있어야 한다. ( =>, =<) -> 틀림. ( >=, <=) -> 정답.

PK, FK 에 설정하는 방법?
	
	primary key(컬럼명); <- pk 설정문법.
	foreign key(컬럼명) references(테이블명) 컬럼명; << ※ 스펠링 주의! foreign references 특히나!
	
	
오라클 4대 천왕!
	내장함수				=> 미리 만들어진 단위 프로그램으로 호출하면 특정 작업을 하고 나서 데이터를 리턴한다.
	join(조인)				=> 서로 다른 테이블의 컬럼을 '횡' 으로 붙이는 작업.
	subquery(서브쿼리)		=> SQL 구문안의 SELECT 문
	group by				=> 통계 관련 작업을 할때 많이 사용.
	

 '중복'을 제거하는 키워드 DISTINCT 또는 UNIQUE
		- 기본적으로 SELECT * FROM 테이블명 ~ 이다.
		- DISTINCT(컬럼명) 또는 UNIQUE(컬럼명) 으로 사용한다.
		- 여러 컬럼의 중복을 제거 할땐 등가로를 빼고 DISTINCT 컬럼명1, 컬럼명2 식으로 사용한다.

	 '행'을 골라내는 키워드 WHERE
		- where는 조건이 여러개일때 and 또는 or 로 구분한다.
		- 조건을 달때 보통 비교연산자(<,>,=,!=) 등을 쓴다. 숫자, 문자열 모두 비교가능하다. *****<주의> "=="가 아닌 =이다.
		- null 값을 찾을때는 IS NULL 혹은 IS NOT NULL 을 사용한다.

	 '행들을' 정렬하는 키워드 ORDER BY
		- order by 는 조건이 여러개일때 ',' 로 구분해준다.
		- 기본적으로 ORDER BY 컬럼명(컬럼인덱스) 라고 적는데 , 컬럼명 뒤에 ASC(오름차순)이 생략되어 있다. DESC 내림차순.
		- DECODE 라는 키워드로 문자열 등의 사람기준의 순서를 지정해줄수 있다.
		- DECODE(컬럼명, 컬럼데이터 , 순서(1번,2번등) )

	 [주의] select 는 절대 원본 테이블이 값을 변경시키지 않는다. 모든 사칙연산등의 연산들은 가상으로 일어난다!!
	 
**********************************************************************************************
 문제를 보고 답을 sql코딩 할수도 있어야 하지만, 
 sql 코딩 구문을보고 무엇을 요구하는지 찾아낼수 있어야 한다. 
<답을 보고 문제를 알아맞춰야하는 이유는 문제가 고객의 요구사항이기 때문이다.>
**********************************************************************************************

****************************************중요 오라클의 조건문 ( case ) 의 여러가지 형태.***********************************************************************************
※※※※※※※※※※※※ case 는 모든 데이타베이스 언어에서 사용하기로한 공용문이다. ※※※※※※※※※※※※※※※※※※※※

-- 가장 기본적인 형태이다.
	select 
		emp_no "직원번호", 
		emp_name "직원명", 
		jikup "직급", 
		case substr(jumin_num,7,1)  -- 오라클의 조건문은 case 칼럼데이터 로 시작해서 end로 끝난다. 
			when '1' then '남' 		-- 컬럼데이터( substr(jumin_num,7,1) ) 가 '1'이면 '남' 출력.
			when '3' then '남' 		
			when '2' then '여' 		-- 컬럼데이터( substr(jumin_num,7,1) ) 가 '2'이면 '여' 출력.
			when '4' then '여' 
			end "성별" 
	from 
		employee;
		-- 단점이 있는데, 칼럼이 "같은지" 만 비교할수 있다. 뭐가 뭐 이면 밖에 못함. 뭐가 뭐보다 크거나 이런게 안된다.
		
**********************************************************************************************************************************************************************		

-- else  구문을 사용하여 나머지 처리.
		select 
		emp_no "직원번호", 
		emp_name "직원명", 
		jikup "직급", 
		case substr(jumin_num,7,1)  -- 오라클의 조건문은 case 칼럼 또는 칼럼을 끌어안은 함수 로 시작해서 end로 끝난다. 
			when '1' then '남' 		-- 컬럼데이터( substr(jumin_num,7,1) ) 가 '1'이면 '남' 출력.
			when '3' then '남' 		
			else '여'				-- else를 사용하여 나머지 처리가능.
			end "성별" 
	from 
		employee;
		
**********************************************************************************************************************************************************************		

-- ※※※※※ case 뒤에 when을 쓰고, 바로 비교 문을 쓴다. 이렇게 하면 장점이 크거나 작은지, 같은지 다른지 비교할수 있다.
select 
		emp_no "직원번호", 
		emp_name "직원명", 
		jikup "직급", 
		case 
			when substr(jumin_num,7,1) = '1' then '남'
			when substr(jumin_num,7,1) = '3' then '남'
			else '여'
			end "성별" 
	from 
		employee;
**********************************************************************************************************************************************************************		
※※※※※※※※※※※※※※ 오라클의 고유 조건문 DECODE ※※※※※※※※※※※※※※

select 
		emp_no "직원번호", 
		emp_name "직원명", 
		jikup "직급", 
		decode ( substr(jumin_num,7,1), '1', '남', '3', '남', '여')	-- decode 장점은 간단하다. 단점은 각 인자가 무슨뜻인지 햇갈린고, 간단한것만 가능하다.
		-- DECODE 조건문은 그냥 컬럼명을 주고 , 비교할데이터, 출력할데이터 를 나열하면 된다.
		--  비교할 데이터 없이 '여' 라고 출력데이터만 주면 자동으로 else문으로 쓴다.
		-- TIP 보기 좋게 나열하는 방법.
		/*
		decode ( substr(jumin_num,7,1),
					'1', '남', 	--조건 1
					'3', '남', 	--조건 2
					'여'		--ELSE
				)
		*/
		"성별" 
	from 
		employee;
		
**********************************************************************************************************************************************************************		