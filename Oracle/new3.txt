■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<107>서브쿼리가 무엇인가!! (subquery)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		=====================================================================================================
				select , insert, update, delete 구문 안에 들어 있는 또 다른 select 문을 말한다.
		=====================================================================================================
		<주의> from 절에 나오는 select 는 서브쿼리가 아니라 inline(인라인뷰) 라고 부른다.
		=====================================================================================================
		=====================================================================================================
		서브쿼리 사용 시 주의점.
		=====================================================================================================
				select , update, delete 안의 서브쿼리는 꼭 ()로 묶는다.
				경우에 따라 조인 대신 서브쿼리를 써도 같은 결과를 낼 수 있다. 이때 join 보다 서브쿼리의 부하가 더 많이 걸린다.
		=====================================================================================================
		서브쿼리의 종류
		=====================================================================================================
				================================================
				비 상관 쿼리.(Noncorrelated Subquery)
				================================================
						서브 쿼리와 외부쿼리가 연관성이 없다.
						서브 쿼리 실행 후의 결과값을 가지고 외부 쿼리가 실행된다.
						select * from employee where salary >= (select avg(salary) from employee); (평균연봉.)
				================================================
				상관쿼리.(Coreelated Subquery)
				================================================
						서브 쿼리와 외부쿼리가 연관성이 있따.
						서브 쿼리와 외부쿼리가 서로 통신하면서 쿼리가 진행된다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<108> 최고 연봉을 받는 직원을 검색하라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		select	*	from	employee
		where	(salary = select max(salary) from employee);
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<109> 평균 연봉을 받는 직원을 검색하라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		select * from employee where salary >= (select avg(salary) from employee);
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<110> 20번 부서에서 최고 연봉자 직원을 검색.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		select * from employee where dep_no = 20 and salary >= (select max(salary) from employee);
				-->	(select max(salary) from employee); 여기서 최고 연봉자 홍길동 5000이 나오는데
				-->	20번 부서에서의 최고 연봉자가 아니다. 서브쿼리에도 dep_no = 20 을 적용시켜서
				-->	20번 부서에서만 최고연봉자를 찾도록 하고,	바깥 쿼리에도 다른 부서에서 20번부서 최고연봉자보다
				--> 높은 연봉을가진 사람들이 나오기 때문에 dep_no = 20으로 다시 행을 골라낸다.
		select * from employee where dep_no = 20 and salary >= (select max(salary) from employee where dep_no = 20);
		================================================================================================
  	아래처럼 하면 문제가 바뀝니다.
  	"20번 부서의 최고 연봉자와 동일한 연봉을 받는 모든 직원을 검색하라."가 된다.
		================================================================================================
		select * from employee WHERE salary >= (select max(salary) from employee where dep_no = 20);
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<111> 직원명, 직급, 연봉, 전체연봉에서 차지하는 비율 검색.[전체연봉에서 차지하는 비율]은 소수점 버리고 %로 표현.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT a.EMP_NAME, a.JIKUP, a.SALARY,
				FLOOR((a.salary/(SELECT SUM(e.SALARY) FROM employee e))*100)||'%' "전체연봉 비율"
		FROM EMPLOYEE a
		ORDER BY
				a.salary/(SELECT SUM(e.SALARY) FROM employee e)*100	DESC
		================================================================================================
		SELECT a.EMP_NAME, a.JIKUP, a.SALARY,
				trunc((a.salary/(SELECT SUM(e.SALARY) FROM employee e))*100,0)||'%' "전체연봉 비율"
		FROM EMPLOYEE a
		ORDER BY
				a.salary/(SELECT SUM(e.SALARY) FROM employee e)*100	DESC
		================================================================================================
		<주의> 정렬할 때는 소수점 컨트롤을 하지말자.(더 정확한 정렬이 가능하다.)
		================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<112> 10번 부서 직원들이 관리하는 고객변호 고객명 직원번호 검색.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
================================================================================================
INNER JOIN
================================================================================================
		SELECT
		  c.CUS_NO	, c.CUS_NAME, e.EMP_NO
		FROM
		  customer c, employee e
		WHERE
				c.emp_no = e.emp_no AND e.dep_no = 10;
================================================================================================
서브 쿼리 답. == IN()
================================================================================================
		SELECT
		  CUS_NO	, CUS_NAME, EMP_NO
		FROM
		  customer
		WHERE
				EMP_NO in(SELECT EMP_NO FROM employee WHERE dep_no = 10);
				================================================================================================
				<참고> in뒤에 n행 1열의 결과가 나오는 서브쿼리가 나오면 n행 1열의 데이터가 in뒤에 (,)로 나열된다.
				================================================================================================
================================================================================================
서브 쿼리 답. == any
================================================================================================
		SELECT
		  CUS_NO	, CUS_NAME, EMP_NO
		FROM
		  customer
		WHERE
				EMP_NO = any(SELECT EMP_NO FROM employee WHERE dep_no = 10);
================================================================================================
상관 쿼리
================================================================================================
		SELECT
				c.CUS_NO	, c.CUS_NAME, c.EMP_NO
		FROM
				customer c
		WHERE
				 --c.EMP_NO = (SELECT EMP_NO FROM employee e WHERE dep_no = 10 AND c.EMP_NO = e.EMP_NO); <- 내가한거
				 --(SELECT count(*) FROM employee e WHERE c.emp_no = e.emp_no and e.dep_no = 10) > 0;
				 (SELECT e.dep_no FROM employee e WHERE c.emp_no = e.emp_no) = 10;	--< 이게 훨씬 낫네
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<113> 평균연봉 이상이고 최대 연봉 미만의 직원명, 연봉, 전체평균연봉, 전체최대 연봉 출력
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
			emp_name "직원명",
			salary	  "연봉",
			(SELECT AVG(salary) FROM EMPLOYEE) "전체평균연봉",
			(SELECT MAX(salary) FROM EMPLOYEE) "전체최대연봉"
		FROM
		  employee
		WHERE
			salary BETWEEN (SELECT AVG(salary) FROM EMPLOYEE)
			AND
			((SELECT MAX(salary) FROM EMPLOYEE)-1)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<114> 최고연봉직원의 직원번호, 직원명, 부서명, 연봉
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
		  e.EMP_NO "직원번호",
		  e.EMP_NAME "직원명",
		  d.DEP_NAME "부서명",
		  e.SALARY "연봉"
		FROM
	  		employee e, DEPT d
	  WHERE
   		e.dep_no = d.dep_no AND e.salary = ( SELECT MAX(salary) FROM EMPLOYEE )
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<115> 담당 고객이 2명 이상인 직원번호, 직원명, 직급
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
	  	e.EMP_NO "직원번호",
	  	e.EMP_NAME	"직원명",
	  	e.JIKUP	"직급"
		FROM
		  employee e
	  WHERE
	  	2 <= (SELECT count(*) FROM customer c WHERE e.emp_no = c.emp_no);
	  ================================================================================================
   		subquery 안에서 바깥쪽 쿼리의 테이블 별칭을 사용하여 e.emp_no 라고 사용하였다.
   		바깥쪽 QUERY를 subquery 에서 참조하고(통신)있으므로 상관쿼리이다.
	  ================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<116> 직원번호 직원명 소속부서명 검색.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
================================================================================================
INNER JOIN
================================================================================================
		SELECT
	  	e.EMP_NO "직원번호",
	  	e.EMP_NAME	"직원명",
	  	d.DEP_NAME	"소속부서명"
		FROM
		  employee e, dept d
	  WHERE
	  	e.dep_no = d.dep_no;
================================================================================================
Sub QUERY
================================================================================================
		SELECT
	  	e.EMP_NO "직원번호",
	  	e.EMP_NAME	"직원명",
	  	(SELECT DEP_NAME FROM dept d WHERE d.dep_no = e.dep_no)	"소속부서명"
		FROM
		  employee e
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<117> 직원번호 직원명 연봉, 연봉 순위 출력. 단 연봉순위 오름차순 유지.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
	  	e.EMP_NO "직원번호",
	  	e.EMP_NAME	"직원명",
	  	e.salary	"연봉",
	  	(SELECT COUNT(*)+1 FROM employee e2 WHERE e.salary < e2.salary) "연봉 순위"
		FROM
		  employee e
		ORDER BY 4
================================================================================================
		연봉순위 뽑는법 : 나보다 연봉을 많이 받는사람 수를 구해서 + 1 한다.
================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<118> 직원번호 직원명 담당 고객수 출력하세요~
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
	  	e.EMP_NO "직원번호",
	  	e.EMP_NAME	"직원명",
	  	(SELECT count(*) FROM customer c WHERE e.emp_no = c.emp_no)	"담당 고객수"
		FROM
		  employee e
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<119> 부서명, 부서직원수, 부서담당고객수 출력.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				d.dep_name "부서명",
				(SELECT COUNT(*) FROM employee e WHERE d.dep_no = e.dep_no) "부서직원수",
				(SELECT COUNT(*) FROM customer c
				WHERE
				(SELECT e2.emp_no FROM employee e2 WHERE d.dep_no = e2.dep_no AND c.emp_no = e2.emp_no) = c.emp_no)
				"부서담당고객수"
		FROM
				dept d
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<120> 직원번호, 직원명, 직급, 주민번호, 직급서열순위 출력하라.
			단 직급이 같으면 나이 많은 직원이 직급서열순위 위이다. 그리고 직급서열순위 오름차순 유지.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				e.emp_no "직원번호",
				e.emp_name"직원명",
				e.jikup"직급",
				e.jumin_num"주민번호",

				(SELECT
						COUNT(*)+1
				FROM employee e2 WHERE
				DECODE(e.jikup,'사장',1,'부장',2,'과장',3,'대리',4,5) >
				DECODE(e2.jikup,'사장',1,'부장',2,'과장',3,'대리',4,5)
				OR
				e2.jikup = e.JIKUP
				AND
				DECODE(SUBSTR(e.jumin_num,7,1),'1','19','2','19','20')||SUBSTR(e.jumin_num,1,6) >
				DECODE(SUBSTR(e2.jumin_num,7,1),'1','19','2','19','20')||SUBSTR(e2.jumin_num,1,6)
				)
				"직급서열순위"
		FROM
				employee e
		ORDER BY 5;
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<121> 고객번호, 고객명, 고객전화번호, 담당직원명, 담당직원직급, 부서번호 출력. -> 서브쿼리 사용할것. 담당직원이 없어도 출력.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
================================================================================================
subquery 정답
================================================================================================
		SELECT
				c.CUS_NO 		"고객번호",
				c.CUS_NAME	"고객명",
				c.TEL_NUM		"고객전화번호",
				NVL((SELECT e.EMP_NAME FROM employee e WHERE e.EMP_NO = c.EMP_NO),'없음')
				"담당직원명",
				NVL((SELECT e.JIKUP FROM employee e WHERE e.EMP_NO = c.EMP_NO), '없음')
				"담당직원직급",
				NVL(TO_CHAR((SELECT e.DEP_NO FROM employee e WHERE e.EMP_NO = c.EMP_NO)), '없음')
				"부서번호"
		FROM
				customer c
================================================================================================
JOIN 정답
================================================================================================
		SELECT
				c.CUS_NO 											 "고객번호",
				c.CUS_NAME										 "고객명",
				c.TEL_NUM											 "고객전화번호",
				NVL(e.EMP_NAME,'없음')					"담당직원명",
				NVL(e.JIKUP, '없음')						"담당직원직급",
				NVL(TO_CHAR(e.DEP_NO), '없음')	"부서번호"
		FROM
				customer c, employee e
		WHERE c.EMP_NO = e.EMP_NO(+)
		ORDER BY 1
================================================================================================
JOIN (ANSI)정답
================================================================================================
		SELECT
				c.CUS_NO 											 "고객번호",
				c.CUS_NAME										 "고객명",
				c.TEL_NUM											 "고객전화번호",
				NVL(e.EMP_NAME,'없음')					"담당직원명",
				NVL(e.JIKUP, '없음')						"담당직원직급",
				NVL(TO_CHAR(e.DEP_NO), '없음')	"부서번호"
		FROM
				customer c LEFT OUTER JOIN employee e
		on c.EMP_NO = e.EMP_NO(+)
		ORDER BY 1
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<122> 고객번호, 고객명, 고객전화번호, 담당직원명, 담당직원직급, 부서번호 출력. -> 고객정보는 다 보여주고 직원정보는 10번 부서만.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
================================================================================================
subquery 정답
================================================================================================
		SELECT
				c.CUS_NO 		"고객번호",
				c.CUS_NAME	"고객명",
				c.TEL_NUM		"고객전화번호",
				(SELECT e.EMP_NAME FROM employee e WHERE e.EMP_NO = c.EMP_NO AND
				e.dep_no = 10)
				"담당직원명",
				(SELECT e.JIKUP FROM employee e WHERE e.EMP_NO = c.EMP_NO AND
				 e.dep_no = 10)
				"담당직원직급",
				(SELECT e.DEP_NO FROM employee e WHERE e.EMP_NO = c.EMP_NO AND
				 e.dep_no = 10)
				"부서번호"
		FROM
				customer c
================================================================================================
JOIN 정답
================================================================================================
		SELECT
				c.CUS_NO 		"고객번호",
				c.CUS_NAME	"고객명",
				c.TEL_NUM		"고객전화번호",
				e.emp_name
				"담당직원명",
				e.jikup
				"담당직원직급",
				e.dep_no
				"부서번호"
		FROM
				customer c , employee e
		WHERE
				c.emp_no = e.emp_no(+) AND e.dep_no(+) = 10
		ORDER BY 1
================================================================================================
JOIN (ANSI)정답
================================================================================================
		SELECT
				c.CUS_NO 		"고객번호",
				c.CUS_NAME	"고객명",
				c.TEL_NUM		"고객전화번호",
				e.emp_name
				"담당직원명",
				e.jikup
				"담당직원직급",
				e.dep_no
				"부서번호"
		FROM
				customer c LEFT OUTER JOIN employee e
		on
				c.emp_no = e.emp_no AND e.dep_no = 10
				================================================================================================
				WHERE 절에 e.dep_no = 10 을 쓰면 안된다. WHERE 절에 쓰면 NULL 이 있는 행은 나오지 않는다.
				================================================================================================
		ORDER BY 1
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<123> GROUP BY 구문이 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		▶SELECT 절에 있는 컬럼안의 중복 데이터를 [하나로 그룹] 지어 주는 역활을 한다.
		▶주로 그룹을 지어 통계를 낼때 사용한다.
		▶GROUP BY 구문 문법은 간단하나 통계를 내는 과정에서 각종 함수가 때거지로 등장한다.
				그러므로 GROUP BY 구문은 함수와의 싸움이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<124> 부서별로 부서번호 급여합 평균급여 인원수 출력.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no						"부서번호",
				SUM(salary) 				"급여합",
				FLOOR(AVG(salary)) 			"평균급여",
				COUNT(*)					"인원수"
		FROM
				employee
		GROUP BY
					dep_no;
		================================================================================================
		▶SELECT 절에 일반 컬럼과 그룹함수 컬럼이 등장하면 GROUP BY 뒤에는 반드시 그룹지을 일반 컬럼이 나와야 한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<125> 직급별로 직급 급여합 평균급여 인원수 출력
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				jikup "직급",
				SUM(salary) "급여합",
				FLOOR(AVG(salary)) "평균급여",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				jikup
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<126> 부서별, 직급별, 부서번호, 직급, 급여합, 평균급여 인원수
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				jikup "직급",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1) "평균급여",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				 dep_no, jikup
		ORDER BY 1,DECODE(jikup,'사장',1,'부장',2,'과장',3,'대리',4,5)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<127>부서별로 직급별 부서번호, 직급, 급여합, 평균급여, 인원수를 출력하되 인원수는 3명 이상을 출력.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				jikup "직급",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1) "평균급여",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				 dep_no, jikup
		HAVING
					COUNT(*) >= 3
		ORDER BY 1,DECODE(jikup,'사장',1,'부장',2,'과장',3,'대리',4,5);
		================================================================================================
		GROUP BY 결과물에서 행을 골라낼 때에는 WHERE 를 쓰지 않는다 HAVING 을 사용할것.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<128>부서별 성별로 부서번호, 성, 급여합, 평균급여, 인원수를 출력
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				CASE WHEN SUBSTR(jumin_num,7,1) IN('1','3') THEN '남자'
				ELSE '여자'END "성별",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1)||'만원' "평균급여",
				COUNT(*)||'명수' "인원수"
		FROM
				employee
		GROUP BY
				dep_no,
				 CASE WHEN SUBSTR(jumin_num,7,1) IN('1','3') THEN '남자'
				ELSE '여자'END
		ORDER BY 1
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<129>입사년대별로 입사년도, 인원수 출력 년도 별로 오름차순.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				FLOOR(TO_NUMBER(TO_CHAR(hire_date,'yyyy'))*0.1)||■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<126> 부서별, 직급별, 부서번호, 직급, 급여합, 평균급여 인원수
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				jikup "직급",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1) "평균급여",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				 dep_no, jikup
		ORDER BY 1,DECODE(jikup,'사장',1,'부장',2,'과장',3,'대리',4,5)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<127>부서별로 직급별 부서번호, 직급, 급여합, 평균급여, 인원수를 출력하되 인원수는 3명 이상을 출력.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				jikup "직급",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1) "평균급여",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				 dep_no, jikup
		HAVING
					COUNT(*) >= 3
		ORDER BY 1,DECODE(jikup,'사장',1,'부장',2,'과장',3,'대리',4,5);
		================================================================================================
		GROUP BY 결과물에서 행을 골라낼 때에는 WHERE 를 쓰지 않는다 HAVING 을 사용할것.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<128>부서별 성별로 부서번호, 성, 급여합, 평균급여, 인원수를 출력
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				dep_no "부서번호",
				CASE WHEN SUBSTR(jumin_num,7,1) IN('1','3') THEN '남자'
				ELSE '여자'END "성별",
				SUM(salary) "급여합",
				ROUND(AVG(salary),1)||'만원' "평균급여",
				COUNT(*)||'명수' "인원수"
		FROM
				employee
		GROUP BY
				dep_no,
				 CASE WHEN SUBSTR(jumin_num,7,1) IN('1','3') THEN '남자'
				ELSE '여자'END
		ORDER BY 1
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<129>입사년도 별로 입사년도, 인원수 출력 년도 별로 오름차순.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		SELECT
				TO_CHAR(hire_date,'yyyy-mm-dd')||'년' "입사날짜",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY
				FLOOR(TO_NUMBER(TO_CHAR(hire_date,'yyyy'))*0.1),TO_CHAR(hire_date,'yyyy-mm-dd')
		ORDER BY 1, 2;
				TO_CHAR(hire_date,'yyyy-mm-dd')||'년' "입사날짜",
				COUNT(*) "인원수"
		FROM
				employee
		GROUP BY





















