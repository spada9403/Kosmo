
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JQuery 가 모조?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	●공개적으로 개발되고 무료로 제공되는 [자바스크립트 사용자 정의 객체]의 이름이다.
	----------------------------------------------------------
	<주의>프로그램 언어의 한 종류가 절대 아니다.
	<참고>누구나 버그 수정，성능 향상 그리고 도움말 작성에 참여할 수 있다.
	<참고>http://plugins.jquery.com/ 에 광범위한 라이브러리(~.js)가 있으며, 꾸준히 업데이트되고 있고 
	        누구나 버그 수정，성능향상, 도움말 작성에 참여할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JQuery 의 장점
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	●디자이너, 퍼블리셔, 개발자 모두가 사용하기 편하고 강력한 기능을 가진 메소드를 제공한다.
	----------------------------------------------------------
	●대부분의 브라우저에서 JQuery 객체의 메소드를 호출하면 동일한 실행 결과를 생산한다. (=cross browsing)
	  즉 브라우저에 따라 다른 코딩을 할 필요가 없다. 
	  기존 자스 코딩은 브라우저에 따라 다른 결과를 산출하는 어려움이 있었다.
	----------------------------------------------------------
	<참고>한번의 코딩으로 모든 브라우저에서 같은 실행결과를 산출하는 것을 크로스 크라우징(=cross browsing) 이라고 한다.
	      개발자가 제일 싫어하는 작업 중의 하나이다.
	----------------------------------------------------------


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JQuery 객체의 메소드를 사용하기 위한 사전 작업은 뭠까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	●jquery-x.x.x.min.js 다운 받고 HTML의 head 태그에 아래와 같이 수입하는 코드를 작성한다. x 는 임의의 버전 번호이다.
	----------------------------------------------------------
		<script src="query-1.6.2.min.js" type="text/javascript"></script>
	----------------------------------------------------------
	jquery-x.x.x.min.js  파일 안에는 JQuery 객체의 메위주를 리턴하는 jQuery 함수 또는 $ 함수가 존재하고
	JQuery 객체의 메소드나 속성변수가 선언되어 있다.
	----------------------------------------------------------
	
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> JQuery 객체의 메위주를 얻을려면 어떻게 합니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	jQuery("선택자") 함수 또는 $("선택자") 함수를 호출하여 얻는다.
	----------------------------------------------------------
	jQuery("선택자") 함수 또는 $("선택자") 함수는 jquery-x.x.x.min.js  파일 안에 존재한다.
	----------------------------------------------------------
	<참고>JQuery 객체의 메위주를 얻어야 JQuery 객체의 메소드를 호출할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> JQuery 객체의 메위주를 얻고 메소드를 호출하는 형식을 보여 줍쇼?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
		-------------------------------------
		var xxx = $("선택자");        //  $("선택자") 함수를 호출하여 얻은 JQuery 객체의 메위주를 변수 xxx에 저장하기
		-------------------------------------
		xxx.JQuery객체메소드명(~)     // JQuery 객체의 메소드 호출
		-------------------------------------
		xxx.JQuery객체속성변수명      // JQuery 객체의 속성변수 호출
		-------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> jQuery("선택자") 함수 또는 $("선택자") 함수 호출 시 도대체 선택자가 뭠까? ***
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	선택자(=selector)는 태그를 지칭 하는 방법론을 말한다.
	----------------------------------------------------------
	JQuery 객체는 태그를 관리하는 객체이므로 태그를 지칭하는 방법론이 여러 가지가 있다.
	----------------------------------------------------------
	<예> var obj = $("[name=uid]"); 
	----------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		   이때 JQuery 객체는 name=uid 를 가진 태그를 관리한다.
		   속성이름 = 속성값 에서 속성값에 공백이 없다면 싱글쿼터를 생략해도 된다.
		   하지만 공백이 있다면 무조건 싱글쿼터 넣어줘야한다.
	----------------------------------------------------------
	<예> var obj = $(".pwd"); 
	----------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		   이때 JQuery 객체는 class=pwd 를 가진 태그를 관리한다.

	----------------------------------------------------------
	<예> var obj = $("#addr");     
	---------------------------------------------------------- 
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		   이때 JQuery 객체는 id=addr 를 가진 태그를 관리한다.
	----------------------------------------------------------
	<예> var obj = $(".family .relation"); 
	---------------------------------------------------------- 
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		   이때 JQuery 객체는 class=family 를 가진 태그 후손 즉 내부에
		                      class=relation 가진 태그 관리한다.
				----------------------------------------------
				<div class=family>
					<span class=relation>얀센 접종자 이성우</span>
				</div>
				<div class=employee>
					<span class=relation>얀센 접종자 최현준</span>
				</div>
				----------------------------------------------
	----------------------------------------------------------
	<예> var obj = $("div"); 
	---------------------------------------------------------- 
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		   이때 JQuery 객체는 div 태그를 관리한다.
		   만약 div 태그가 2개 이상이면 정말 2개 이상을 관리한다.



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> body 태그 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드가 있다.
	JQuery 를 이용한다면 어떻게 코딩해야합니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	---------------------------------------------------------- 
	$(document).ready(
		function () {
			body 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드.
		}
	)
	---------------------------------------------------------- 
	위 아래모두 같은 코딩이지만 현업에서는 코드 줄을 줄이기 위해 아래와 같이 사용한다.
	---------------------------------------------------------- 
	$(document).ready(function () {
			body 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드.
	})
	---------------------------------------------------------- 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> <input type="button" value="로그인" class = "login_btn"/> 태그가 실행된 결과물인 버튼을 클릭하면 checkForm() 함수 호출하고 싶으면?
						즉 => click 이벤트를 걸려면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	$(".login_btn").click(function () {
		checkForm();
	})
	----------------------------------------------------------
	click( 익명함수 )	=>	JQuery 객체가 관리하는 태그에 클릭 이벤트가 발생하면 익명함수 안의 코딩을 실행하라.
	----------------------------------------------------------
	선택자가 가르키는 태그에 클릭 이벤트가 발생하면 실행구문 을 실행하기
	----------------------------------------------------------
	$("선택자").click(function () {
		실행구문.
	})
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 아래 html 태그의 실행 결과에서 웹브라우저에 문자열 입력양식이 출력된다.
	웹브라우저에서 아이디를 입력한 경우 입력된 아이디를 얻기 위한 JQuery 차원 코딩은?
						<form name="loginForm">
							<input type="text" name="uid" class="uid" size=10/>
						</form>
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	----------------------------------------------------------
	정답1
	----------------------------------------------------------
		var uid $(".uid").val();
	----------------------------------------------------------
	정답2
	----------------------------------------------------------
		var uid = $("[name='uid']").val();
	----------------------------------------------------------
	정답3
	----------------------------------------------------------
		var uid = $("[name=loginForm] .uid").val()
	----------------------------------------------------------
	정답4
	----------------------------------------------------------
		var uid = $("[name=loginForm] [name='uid']").val();
	----------------------------------------------------------
	<주의> $("[name=loginForm] .uid")에서 공백은 후손을 의미한다.
	----------------------------------------------------------
	<참고> 될 수 있는 데로 정답1 또는 정답3 을 사용하자. css 사용시 유리하기 때문이다.	=>	정답3 권장함.
	<참고> 선택자는 주로 class 값을 많이 사용한다. 여러 이점이 많다.
	----------------------------------------------------------

	val()	=>	JQuery 객체가 관리하는 태그의 value 값을 리턴하는 메소드.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> $(".xxx").val()	와		$(".xxx").val("")의 차이점.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	$(".xxx").val()	=>	selector가 가져온 class="xxx"을 가지고 있는 태그의 value 값을 가져 오라는 뜻.
	$(".xxx").val("")	=>	selector가 가져온 class="xxx"을 가지고 있는 태그의 value 값을 "" 으로 세팅하라는 뜻.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> JQeury 객체에서 선택자의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	$(".xxx");
		class = "xxx"를 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기.
	$("#xxx");
		id="xxx" 가진 태그를 관리하는 JQuery 객체 메위주 리턴.
	$("태그명");
		<태그명></태그명> 태그 관리하는 JQuery 객체 메위주 리턴.
	$("*")
		모든 태그를 관리하는 JQuery 객체 리턴.
		예>		<form name="memRegForm">
					<input type="text" name="mem_id"  class="mem_id">
					<input type="text" name="mem_name" class="mem_name" >
					<input type="password" name="pwd"  class="pwd">
					<select name="addr" class="addr">
						<option value=" ">--선택요망--</option>
						<option value="서울">서울</option>
						<option value="경기">경기</option>
						<option value="인천">인천</option>
						<option value="기타">기타</option>
					</select>
			</form>
			-----------------------------------------------
			$("[name='memRegForm'] *")    
			-----------------------------------------------
				name="memRegForm" 가진 태그의 모든 후손 태그를 관리하는 JQuery 객체 리턴.

	$(".xxx:checked")
		class = "xxx"를 가진 태그중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기.
		체크된 태그는 주로 .radio 또는 checkbox 입력양식이다.
	$("선택자1 선택자2")
		선택자1 이 가르키는 태그의 후손 중에 선택자2가 가르키는 태그를 관리하는 JQUery 객체 메위주 리턴하기
			예) $(".xxx :checked")
					class="xxx" 가진 태그의 후손 중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기.
	$("[태그 속성명 = '속성값']")
		태그속성명 = '속성값' 을 가진 태그를 관리하는 JQuery 객체 메위주 리턴.
		<주의> [와]가 있어야한다.
		예>	$("[name='mem_id']")
			name = "mem_id" 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
		예>	$("[type='radio']")
			type = 'radio' 가진 태그, 즉 radio 입력양식 태그를 관리하는 JQuery 객체 메위주 리턴하기.
	$("[태그 속성명 != '속성값']")
		태그속성명='속성값' 을 안 가진 태그를 관리하는 JQuery 객체 메위주 리턴.
	$("[태그 속성명 ^= '속성값']")
		예> $("[name^='mem_']")
			name 속성값이 mem_문자로 시작하는 태그를 관리하는 JQuery 객체 메위주 리턴하기.
	$("[태그 속성명 $= '속성값']")
		예> $("[name$='mem_']")
			name 속성값이 mem_문자로 끝 태그를 관리하는 JQuery 객체 메위주 리턴하기.
	$("[태그 속성명 *= '속성값']")
		예> $("[name*='mem_']")
			name 속성값이 mem_문자를 포함하는 태그를 관리하는 JQuery 객체 리턴.
	$("선택자:first")
		선택자가 가리키는 태그 중 첫 번째 태그를 관리하는 JQuery 객체 리턴.
		예> $(".gender:first")
			class = 'gender' 가진 태그 중에 첫번째 태그를 관리하는 JQuery 객체 메위주 리턴.
	$("선택자:last")
		선택자가 가리키는 태그 중 마지막 태그를 관리하는 JQuery 객체 리턴.
		예> $(".gender:last")
			class = 'gender' 가진 태그 중에 마지막 태그를 관리하는 JQuery 객체 메위주 리턴.
	$("선택자:odd")
		선택자가 가리키는 태그 중 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 리턴.
		예> $(".hobby:odd")
			<input type="checkbox" name="hobby" class="hobby" value="운동" />운동 
			<input type="checkbox" name="hobby" class="hobby" value="여행" />여행
            <input type="checkbox" name="hobby" class="hobby" value="독서" />독서 
			<input type="checkbox" name="hobby" class="hobby" value="영화감상" />영화감상
			<input type="checkbox" name="hobby" class="hobby" value="기타" />기타
			class='hobby' 가진 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 메위주 리턴하기.
			즉 여행과 기타 이다.
	$("선택자:even")
		선택자가 가리키는 태그 중 인덱스 번호가 짝수인 태그를 관리하는 JQuery 객체 리턴.
		예> $(".hobby:even")
			<input type="checkbox" name="hobby" class="hobby" value="운동" />운동 
			<input type="checkbox" name="hobby" class="hobby" value="여행" />여행
            <input type="checkbox" name="hobby" class="hobby" value="독서" />독서 
			<input type="checkbox" name="hobby" class="hobby" value="영화감상" />영화감상
			<input type="checkbox" name="hobby" class="hobby" value="기타" />기타
			class='hobby' 가진 태그 중에 인덱스 번호가 짝수인 태그를 관리하는 JQuery 객체 메위주 리턴하기.
			즉 운동,독서,기타 이다.
	$("선택자:eq(i)")
		선택자가 가리키는 태그 중에 인덱스 번호가 i번째인 태그를 관리하는 JQuery 객체 리턴.
		i는 0부터 시작하는 인덱스 번호가 들어간다.
	$("선택자:first-child")
		선택자가 가리키는 태그 중 각 태그의 부모입장에서 [첫번째] 자식에 해당하는 태그를 관리하는 JQuery 객체 리턴.
		예>
			<table class="student">
				<tr>
					<td>사오정</td>
					<td>대리</td>
					<td>111111</td>
				</tr>
				<tr>
					<td>저팔계</td>
					<td>과장</td>
					<td>222222</td>
				</tr>
			</table>
	$(".student td:first-child")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 첫째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>사오정</td>  와 <td>저팔계</td> 태그를 관리하는 JQuery 객체 리턴된다..
	$(".student td:last-child")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 마지막 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>사오정</td>  와 <td>저팔계</td> 태그를 관리하는 JQuery 객체 리턴된다..
		<<nth란 : 몇번째인지도 모를 이라는 의미를 가지고 있다.>>
	$(".student td:nth-child(n)")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 n번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		if n = 2 라면 대리 와 과장 태그를 관리하는 JQuery 객체 리턴한다.
	$(".student td:nth-child(odd)")
	$(".student td:nth-child(even)")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 홀수 / 짝수 번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
	$(".student td:gt(2)")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		순서번호가 2번째 놈 이후 해당하는 td를 관리하는 JQuery 객체 리턴.
	$(".student td:lt(2)")
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		순서번호가 2번째 놈 이전 해당하는 td를 관리하는 JQuery 객체 리턴.
	$("선택자1:has(선택자2)")
		선택자1이 가르키는 태그 중 후손으로 선택자 2를 가진 선택자 1을 관리하는 JQuery 객체 리턴
	$("선택자1:contains('문자열')")
		선택자1이 가르키는 태그 중 후손으로 문자열을 가진 내포하고 있는 태그를 관리하는 JQuery 객체 리턴.
	$("선택자1:not(선택자2)")
		선택자1이 가르키는 태그 중 선택자2 가 가르키는 태그가 아닌 태그를 관리하는 JQuery 객체 리턴.
	$(":text")
		type = "text"를 가진 태그들을 관리하는 JQuery 객체 리턴.
		$("[type='text']") 와 동일하다. 다른 type들도 사용 가능.
	$(":disabled")
		비활성화된 태그들을 관리하는 JQuery 객체 리턴
	$(":enabled")
		활성화된 태그들을 관리하는 JQuery 객체 리턴
	$(":visible")
		웹 화면에 보이는 태그들을 관리하는 JQuery 객체 리턴
	$(":hidden")
		웹 화면에 안 보이는 태그들을 관리하는 JQuery 객체 리턴
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> JQuery 객체의 메소드의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	*********************************************
	add( "선택자" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 [선택자]가 가리키는 태그도 포함하여 관리하는 JQuery 객체 반환.
		즉 [선택자1]이 가리키는 태그와  [선택자2]가 가리키는 태그를 관리하는 JQuery 객체 반환.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
		<input type="text" name="mem_name" class="mem_name" >
		<input type="text" name="mem_id"  class="mem_id">
		-----------------------------------------------------
			-----------------------------------------------------
			var obj = $(".mem_name").add( ".mem_id" )
			-----------------------------------------------------
				obj에는 [선택자1]이 가리키는 태그와  [선택자2]가 가리키는 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				위 코드는 아래 처럼도 가능하다
				----------------------------------
				var obj = $(".mem_name,.mem_id" )
				----------------------------------
	*********************************************
	children( "선택자2" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 자식 태그를 관리하는 JQuery 객체 반환.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
		<div class="member">
			<input type="text" name="mem_name" class="mem_name" >
			<div class="family">
				<input type="text" name="chile_name" class="chile_name" >
			<div>
		<div>
		-----------------------------------------------------
			-----------------------------------------------------
			var obj = $(".member").children("chile_name")
			-----------------------------------------------------
				obj에는 class=member 이 가리키는 태그의 자식 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				즉 <input type="text" name="chile_name" class="chile_name" > 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
	*********************************************
	parent( )
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 부모 태그를 관리하는 JQuery 객체 반환.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
		<div class="member">
			<input type="text" name="mem_name" class="mem_name" >
			<div class="family">
				<input type="text" name="chile_name" class="chile_name" >
			<div>
		<div>
		-----------------------------------------------------
			-----------------------------------------------------
			var obj = $(".mem_name").parent( )
			-----------------------------------------------------
				obj에는 class=mem_name 이 가리키는 태그의 부모 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				즉 <div class="member"> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
	*********************************************
	parents( "선택자2" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 조상 태그 중에 선택자2 가 가르키는 태그 중 제일 가까운 태그를 관리하는 JQuery 객체 반환.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
		<div class="aaa">
			<div class="xxx">
				<input type="text" name="mem_name" class="mem_name" >
				<span>
					<input type="text" name="child_name" class="child_name" >
				</span>
			<div>
		<div>
		-----------------------------------------------------
			-----------------------------------------------------
			var obj = $(".child_name").parents("div")
			-----------------------------------------------------
				obj에는 class=child_name 이 가리키는 태그의 조상 태그 중 제일 가까운 div 태그를 관리하는 
				JQuery 객체의 메위주가 저장된다.
	*********************************************
	filter( "선택자2" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그 중에 선택자2 가 가르키는 태그를 관리하는 JQuery 객체 반환.
				결국 <div class="xxx"> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.
	*********************************************
	find( "선택자2" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 후손중에 선택자2 가 가르키는 태그를 관리하는 JQuery 객체 반환.
	*********************************************
	first()
	*********************************************
		현재 JQuery 객체가 관리하는 태그중에 첫번째 태그를 관리하는 JQuery 객체 반환.
	*********************************************
	last()
	*********************************************
		현재 JQuery 객체가 관리하는 태그중에 마지막 태그를 관리하는 JQuery 객체 반환.
	*********************************************
	next()
	*********************************************
		현재 JQuery 객체가 관리하는 태그 다음에 나오는 형제 태그를 관리하는 JQuery 객체 반환
		예>
			<input type="text" name="mem_id" class="mem_id">
			<input type="text" name="mem_name" class="mem_name">
			var obj = $(".mem_id").next();
				obj는 class="mem_id"가 가르키는 태그의 다음 태그를 관리하는 객체의 메위주가 저장된다.
				결국 <input type="text" name="mem_name" class="mem_name">관리하는 JQuery 객체가 저장된다.
	*********************************************
	nextAll()
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체 반환.
		<주의> 형제란 같은 부모밑에 있는 자식들을 말한다.
		예>
		<div>
			<div>사오정</div>
			<div class="xxx" >저팔계</div>
			<div>손오공</div>
			<div>삼장법사</div>
		</div>
		<div>
			<div>이순신</div>
			<div>권율</div>
			<div>이성계</div>
			<div>세종대왕</div>
		</div>
		var obj = $(".xxx").nextAll();
		obj에는 class=xxx 가 가르키는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
		결국 손오공,삼장법사 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
	*********************************************
	prev()  <참고> previous
	*********************************************
		현재 JQuery 객체가 관리하는 태그 이전에 나오는 형제 태그를 관리하는 JQuery 객체 반환
		예>
		<div>
			<div>사오정</div>
			<div class="xxx" >저팔계</div>
			<div>손오공</div>
			<div>삼장법사</div>
		</div>
		<div>
			<div>이순신</div>
			<div>권율</div>
			<div>이성계</div>
			<div>세종대왕</div>
		</div>
		var obj = $(".xxx").prev();
			obj에는 class=xxx 가 가리키는 태그의 이전에 나오는 형제 태그를 관리하는 JQuery 객체 메위주 저장.
			결국 사오정 태그를 관리하는 객체가 저장된다.
	*********************************************
	prevAll( )   
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 이전에 나오는 모든 형제 태그를 관리하는 JQuery 객체 반환.
		<비유>내 위에 있는 모든 형
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").prevAll();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
	*********************************************
	eq(i)   
	*********************************************
		현재 JQuery 객체가 관리하는 태그 중에 인덱스 번호 i번째 인 태그를 관리하는 JQuery 객체 반환.
		예>
			<div class=movie>
					<div>이도공간</div>
					<div>엑소시스트</div>
					<div>여고괴담</div>
					<div>컨저링</div>
			</div>
			var obj = $(".movie").find("div").eq(2);
				obj에는 class=movie가 가리키는 태그의 후손 중 div 태그 중 인덱스번호 2번인 태그를
				관리하는 JQuery 객체의 메위주가 저장된다.
				결국 obj는 여고괴담 태그를 관리한다.
	*********************************************
	siblings()
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 모든 형제 태그를 관리하는 JQuery 객체반환.
		<주의>모든 형제를 가리키므로 자기자신은 빠진다.
			=> 나를 제외한 모든 형제
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").siblings();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 사오정 손오공 삼장법사 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
	*********************************************
	not("선택자")
	*********************************************
		현재 JQuery 객체가 관리하는 태그 중에 선택자가 가르키는 태그를 제외한 형제 태그들을 관리하는 JQuery 객체 반환.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			-----------------------------------------------------
			var obj = $(".cartoon div").not(".xxx");
			-----------------------------------------------------
				obj에는 class=cartoon 가 가리키는 태그의 후손 중 class=xxx를 가지고 있지 않은
				사오정 손오공 삼장법사 태그를 관리하는 JQuery 객체의 메위주 저장.
	*********************************************
	text()
	*********************************************
		현재 JQuery 객체가 관리하는 태그가	끌어안고 있는 문자를 리턴. 이때 문자는 화면에 출력되는 문자다.
		예>
			<div class=xxx>저팔계</div>
			var str = $(".xxx").text();
			str에는 class=xxx 가 가리키는 태그가 끌어안고 있는 문자 "저팔계"가 저장되어 있다.
	*********************************************
	text("문자열")
	*********************************************
		현재 JQuery 객체가 관리하는 태그 내부에 "문자열"을 덮어쓴다.
		예>
			<div class=xxx >저팔계</div>
			$(".xxx").text("오세황");
				class=xxx 가 가리키는 태그 내부에 오세황 이라는 문자를 덮어씌운다.
				결과적으로 <div class=xxx>저팔계</div> 가 <div class=xxx>오세황</div> 로 바뀌는 꼴이다.
				그러므로 화면에 출력되는 저팔계 가 오세황으로 바뀌어 보인다.
	*********************************************
	html()
	*********************************************
		현재 JQuery 객체가 관리하는 태그가 끌어안고 있는 모든 코딩을 문자열로 리턴한다. 코디에는 문자열 또는 html 태그도 포함된다.
		<div class=xxx><div>저팔계</div></div>
		var str = $(".xxx").html();
			str 에는 class=xxx 가 가리키는 태그가 끌어안고 있는 모든 코딩을 문자로 저장되어 있다.
			결국 str에는 <div>저팔계</div> 가 문자열로 저장되어 있다.
	*********************************************
	html("html 태그도 포함가능 문자열")
	*********************************************
		현재 JQuery 객체가 관리하는 태그 내부에 "문자열" 을 덮어쓴다. 문자열 안에는 html태그도 있을수 있다.
		예>
			<div class=xxx ><div>저팔계</div></div>
			$(".xxx").html("<span>사오정</span>");
				class=xxx가 가리키는 태그 안에 <span>사오정</span> 덮어씌우기.
				결국 <div class=xxx ><div>저팔계</div></div> 는
				<div class=xxx ><span>사오정</span></div> 로 바뀐다.
	*********************************************
	val( )  
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
		이때 DOM 객체의 value 라는 속성변수 안의 값을 문자열로 리턴한다.
		주로 value 라는 속성변수를 가진 태그는 <input ~> 또는 <select ~> 또는 <textarea ~> 이다.
		----------------------------------------------------------------------------
		<form name="memRegForm">
			<input type="text" name="uid">
		</form>
		----------------------------------------------------------------------------
			위 html 을 웹브라우저가 읽어들이면 
			<input type="text" name="uid"> 태그는 Text 객체로 생성한다.
			그리고 이 Text 객체에 대응하는 입력양식이 웹브라우저 화면에 출력된다.
			웹브라우저 상에 이 입력양식에   bravo  라고 입력한다면 
			Text 객체의 속성변수 value 에는 bravo 가 저장된다.
			이 상태에서 
			var str = $(".uid").val(); 코드가 실행된다면 Text 객체의  value 속성변수 안의 값을 리턴하여 str 에 저장하기 된다.

	*********************************************
	val( "문자열" )  
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
		이때 DOM 객체의 value 라는 속성변수 안에   문자열   을 삽입한다.
		----------------------------------------------------------------------------
		<form name="memRegForm">
			<input type="text" name="uid">
		</form>
		----------------------------------------------------------------------------
			위 html 을 웹브라우저가 읽어들이면 
			<input type="text" name="uid"> 태그는 Text 객체로 생성한다.
			그리고 이 Text 객체에 대응하는 입력양식이 웹브라우저 화면에 출력된다.
			이 상태에서 
			$(".uid").val("bravo"); 코드가 실행된다면 Text 객체의  value 속성변수 안의 값을 bravo 로 세팅하게 된다.
			그러므로 웹화면상에서도 입력양식에 bravo 가 입력되어 보인다
	*********************************************
	append( "html 코드" )  
	*********************************************
		현재 JQuery 객체가 관리하는태그 내부에 막내 자식으로 html코드를 삽입한다.
	*********************************************
	prepend( "html 코드" )  
	*********************************************
		현재 JQuery 객체가 관리하는태그 내부에 첫째 자식으로 html코드를 삽입한다.
	*********************************************
	after( "html 코드" )  
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 [밑 동생]으로 html코드 를 삽입한다.
	*********************************************
	before( "html코드" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 위 형으로 html코드   를 삽입한다.
		<주의>prev() 와 헷갈리지 말자
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			-----------------------------------------------------
			$(".xxx").before("<div>짱구</div>");
			-----------------------------------------------------	
				class=xxx 가 가리키는 태그 다음으로 즉 위 형으로 <div>짱구</div>  를 삽입하기.
				결국 아래 처럼 태그가 삽입된다.
					<div class="cartoon">
						<div>사오정</div>
						<div>손오공</div>
						<div>짱구</div>
						<div class=xxx>저팔계</div>
						<div>삼장법사</div>
					</div>
	*********************************************
	remove()
	*********************************************
		JQuery가 관리하고 있는 태그와 그 후손 모두 삭제
	*********************************************
	empty()
	*********************************************
		JQuery가 관리하고 있는 태그의 후손 모두 삭제.(자기자신 삭제 X)
	*********************************************
	addClass( "클래스명" )
	*********************************************
		JQuery가 관리하고 있는 태그에 class=클래스명 속성 삽입하라.
	*********************************************
	removeClass( "클래스명" )
	*********************************************
		JQuery가 관리하고 있는 태그에 class=클래스명 속성값 삭제
	*********************************************
	toggleClass( "클래스명" ) <참고> toggle => 껏다 켯다 왔다 갔따.
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 class=클래스명 이 있다면 제거하고 없다면  삽입한다.
	*********************************************
	attr("태그 속성명")
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 태그속성명에 해당하는 속성값을 리턴.
	*********************************************
	attr("태그 속성명","태그 속성값") 
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 태그속성명 에 태그속성값 삽입.
		<주의> 태그의 특성이 바뀌는 것이므로 조심히 사용하삼.
	*********************************************
	attr(["태그 속성명":"태그 속성값","태그 속성명":"태그 속성값"]) => 이거 아닌거 같음.
	attr({  속성명:속성값, 속성명:속성값, 속성명:속성값  }) 이거맞는거같음 
	*********************************************
		현재 JQuery 가 관리하는 태그에 속성명:속성값 여러개 삽입.
	*********************************************
	removeAttr("태그 속성명") 
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 태그속성명과 값을 삭제
	*********************************************
	prop( "DOM객체의속성변수명" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 이 DOM 객체의 속성변수의 값을 리턴한다.
		//--------------------------------------------------
		<참고>주로 checkbox 입력양식 또는 radio  입력양식에 체크여부를 얻을 때 사용한다.
		//--------------------------------------------------
			//--------------------------------------------------
			<input type="checkbok" name="skill" value="JSP" class="skill">JSP
			<input type="checkbok" name="skill" value="ASP" class="skill">ASP
			<input type="checkbok" name="skill" value="PHP" class="skill">PHP
			//--------------------------------------------------
			<문제>ASP 의 체크여부를 얻을려면?
			//--------------------------------------------------
				var flag = $(".skill").filter("[value=ASP]").prop( "checked" )
	*********************************************
	prop( "DOM객체의속성변수명", "데이터" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 
		이 DOM 객체의 속성변수에 데이터를 저장한다.
		//--------------------------------------------------
		<예>checkbox 입력양식 또는 radio  입력양식에 체크를 해주거나 체크를 뺄때 많이 사용한다.
		//--------------------------------------------------
			//--------------------------------------------------
			<input type="checkbok" name="skill" value="JSP" class="skill">JSP
			<input type="checkbok" name="skill" value="ASP" class="skill">ASP
			<input type="checkbok" name="skill" value="PHP" class="skill">PHP
			//--------------------------------------------------
			<문제>코딩으로  JSP 를 체크하려면?
			//--------------------------------------------------
				$(".skill").filter("[value=JSP]").prop( "checked", true );
	*********************************************
	each( function (index){실행구문} )  
	*********************************************
		현재 JQuery 가 관리하는 태그들에 차례대로 접근해서 실행구문을 반복 실행한다.
		실행구문 안에서 each가 잡은 태그를 지칭할때 $(this) 를 사용한다.
	*********************************************
	hover( function () {실행구문1;} , function () {실행구문2;} )
	*********************************************
		현재 JQuery 객체가 관리하는 태그 들에 마우스를 대면 실행구문1 실행, 마우스 때면 실행구문 2 실행.
	*********************************************
	index()  
	*********************************************
		현재 JQuery 객체가 관리하는 태그가 형재 태그들 중에 몇번째 인덱스 번호에 해당하는지를 리턴한다.
	*********************************************
	index(선택자1)  
	*********************************************
		현재 JQuery 객체가 관리하는 태그들중 선택자1가 가르키는 태그의 서열 위치 인덱스번호 리턴.
	*********************************************
	hide()  
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 웹화면에서 사라지게한다. 안보일뿐 존재함.
	*********************************************
	show()  
	*********************************************
		현재 JQuery 객체가 관리하는 태그가 웹화면에서 안보이는 상태라면 웹화면에서 보이게 한다.
	*********************************************
	이벤트명( function(){실행구문;} )  
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 이벤트명이 발생하면 실행구문을 실행한다.
			*********************************************
			change( function(){실행구문;} )  주우우우우ㅜ우웅요
			*********************************************
				현재 JQuery 객체가 관리하는 태그에 아래와 같은 이벤트가 발생하면 실행구문을 실행한다.
					checkbox 또는 radio 라면 체크가 들어가거나 빠질떄.
					select 라면 옵션을 바꿀때.
					text/password/textarea 등등 문자를 입력받는 애들은 기존 있던 문자가 바뀌고, focus가 빠져나갈때(커서가 나갈때) 발생.
			*********************************************
			click( function(){실행구문;} ) 
			*********************************************
				현재 JQuery 객체가 관리하는 태그에 클릭이벤트가 발생하면 실행구문을 실행한다.
	*********************************************
	css("css속성명","css속성값")
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 css속성명에 css속성값 설정하기.

		<참고>CSS(=Cascading Style Sheets)
			HTML 문서의 전반적인 [스타일]을 미리 저장해 둔 스타일시트이다.
			문서 전체의 일관성을 유지할수 있고, 세세한 스타일 지정의 필요를 줄어들게 하였다.
			웹에서 스타일이란 모양새, 색상, 컨텐츠 배치 등을 말한다.
			기존의 HTML은 웹 문서를 다양하게 설계하고 수시로 변경하는데 많은 제약이 따르는데,
			이를 보완하기 위해 만들어진 것이 스타일 시트이고 스타일 시트의 표준안이 바로 css이다.
			간단히 스타일 시트라고도 한다.
			CSS 를 사용하면 보다 풍부한 디자인으로 웹을 설계할 수 있고,
			글자의 크기, 글자체, 줄간격, 배경 색상, 컨텐츠 배치 등을 자유롭게 선택하거나 변경할 수 있으며
			유지-보수 도 간편하게 할 수 있다. >> 디자이너 영역이다.
			CSS 의 설정 형식
			선택자{
				CSS속성명:CSS속성값;
				~
			}
			JQuery css 메소드 설정방법(JSON과 비슷)
			css({
				css속성명:"css속성값",
				css속성명:"css속성값",
				~
				css속성명:"css속성값"
			})
	*********************************************
	hide(속도,function(){실행구문})
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 숨기게 한 후에 익명함수를 호출한다.
		<주의> 가로세로 크기가 같은 비율로작아지며 사라진다.
		<주의> 매개변수로 들어오는 데이터가 둘다 생략될수 있따.
		<주의> 매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략가능하다.
		<주의> 속도는 n초 X 1000 이다.
		<주의> 속도는 다음과 같이 문자로 써도 된다.
				"slow", "nomal", "fast", (각각 0.6,0.4,0.2 초이다.) 의 문자 입력가능.
	*********************************************
	show(속도,function(){실행구문})
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 출력물이 웹화면에서 보이게 한다.
		hide(~)의 반대이다.
		매개변수 설명은 hide와 동일.
	*********************************************
	fadeOut(속도,function(){실행구문})
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 투명하게 된 후에 익명함수를 호출.
		<주의> 매개변수로 들어오는 데이터가 둘다 생략될수 있따.
		<주의> 매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략가능하다.
	*********************************************
	fadeIn(속도,function(){실행구문})
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 보이게 한 후에 익명함수를 호출.
		<주의> 매개변수로 들어오는 데이터가 둘다 생략될수 있따.
		<주의> 매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략가능하다.
	*********************************************
	fadeTo(속도,function(){실행구문})
	*********************************************
	*********************************************
	slideUp(속도,function(){실행구문})
	*********************************************
	*********************************************
	slideDown(속도,function(){실행구문})
	*********************************************
	*********************************************
	animate(css설정,속도,function(){실행구문})
	*********************************************	
		현재 JQuery객체가 관리하는 태그의 출력물을 설정속도로 [css설정]을 하는 애니메이션을 일으킨 후 익명함수 실행.
	*********************************************
	bind("이벤트명1",function(){실행구문})
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 이벤트명에 해당하는 이벤트가 발생하면 익명함수 실행.
		bind("이벤트명1 이벤트명2 ~",function(){실행구문})
			여러개 이벤트를 하나의 함수로 처리할때.
		bind("이벤트명1",function(){~}, "이벤트명2",function(){~})
			각각의 이벤트명에 해당하는 이벤트가 발생하면 각각의 익명함수 실행.
	*********************************************
	unbind("이벤트명1")
	*********************************************
		현재 JQUery 객체가 관리하는 태그에 bind(~)로 메소드로 지정했던 이벤트를 지운다.
		즉 bind(~)로 메소드로 이벤트가 발생하면 실행할 코드를 unbind 메소드를 호출함으로서
		실행코드를 무려고하 시킨다.
	*********************************************
	one("이벤트명1",function(){실행구문})
	*********************************************
		bind와 동일한 기능을 가진다.
		<주의> bind와 on의 차이점.
			버튼 입력양식을 클릭하면 bind메소드로 설정한 익명함수가 호출될 경우
			이 버튼을 연달아 클릭하면 연달아 익명함수가 호출된다.
	*********************************************
	이벤트명()  
	trigger( "이벤트명" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 이벤트명 에 해당하는 이벤트를 코딩으로 일으킨다.
	*********************************************
	toggle(function(){~},function(){~})
	*********************************************
		현재 JQuery 객체가 관리하는 태그 들에 클릭이벤트가 홀수번째 발생하면 실행구문1 실행
												클릭이벤트가 짝수번째 발생하면 실행구문2 실행
	*********************************************
	error(function(){~})
	*********************************************
		현재 JQuery 객체가 관리하는 이미지 관련 태그에 src속성값의 이미지가 없을 경우 실행구문을 실행.
		이 실행구문은 주로 다른 이미지로 대체하던가 아니면 경고를 띄우는 등의 실행구문이다.
	*********************************************
	focus()
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 포커스를 들인다.
	*********************************************
	blur()
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 포커스를 뺸다.
	*********************************************
	size()
	*********************************************
		현재 JQuery 객체가 관리하는 태그의 개수를 리턴.
		<주의> 현재 JQuery 객체가 관리하는 태그가 없는 상태라면 0을 리턴.
	*********************************************
	is( 선택자1 )
	*********************************************
		현재 JQuery 객체가 관리하는 태그와 선택자1이 가르키는 태그가 같은 경우 true를 리턴.
	*********************************************
	hasClass( "클래스명" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그에 class="클래스명" 이라면 true 리턴
	*********************************************
	disable( "클래스명" )
	*********************************************
		현재 JQuery 객체가 관리하는 태그를 비활성화 시킨다.
		주로 입력양식의 태그를 무력화시킬때 사용한다.
		또한 네임 값과 밸류값이 서버쪽으로 전송조차 되지 않는다.
	*********************************************
	serialize() 프로젝트에서 비동기 방식으로 서버와 통신할때 사용할 꺼임.
	*********************************************
		현재 JQuery 객체가 관리하는 태그 후손 중에 입력양식의 태그들의 name값과 value값을 아래와 같은 문자열로 리턴한다.
		JQuery 객체가 관리하는 태그는 십중 팔구 form 태그이다.
		비동기방식으로 웹서버와 통신할때 유저가 입력/선택한 데이터를 보낼때 사용한다.

		encoding => 컴퓨터가 통신/저장 목적으로 데이터를 부호화 하는것을 말한다. 전세계 모든 언어를 부호화 할 수 있는 기법이 UTF-8이다.
		decoding => encoding 된 데이터를 다시 원래의 데이터로 복구시키는것을 말한다.
		비동기방식 => 웹화면의 이동없이 즉 웹페이지 이동 없이 웹서버와 통신하는 것을 말한다.
		AJAX => 웹서버와 비동기 방식으로 통신한 결과를 현재 화면에 반영하는데 사용되는 기술을 총칭하는 말이다.
		"name값1=value값1문자열의인코딩&"name값2=value값2문자열의인코딩&~"
	*********************************************
	$.trim("문자열")
	*********************************************
		문자열에서 맨앞 또는 맨뒤 공백을 제거한 문자열 리턴한다.
		$는 JQuery 라이브러리에 들어있는 변수이다.
		이 변수안에는 JQuery 객체가 저장되어있다.
		이 객체는 태그를 관리하지는 않는다.
	*********************************************
	$.map(array객체 메위주, function(value, index){~~return 값;})
	*********************************************
		Array 객체의 배열변수에 차례대로 접근해서 function(index, value),{~~return값;} 을
		실행하여 return 값; 에 의해 리턴된 값을 새로운 Array 객체에 저장해 Array 객체의 메위주를 리턴.
	*********************************************
	$.grep(array객체 메위주, function(value, index){~~return 값;})
	*********************************************
		Array 객체의 배열변수에 차례대로 접근해서 function(index, value),{~~return값;} 을
		실행하여 return 값 이 true일 경우의 배열가값만 모아 새로운 Array 객체에 저장해 Array 객체의 메위주를 리턴.
	*********************************************
	$.merge(array객체 메위주1, array객체 메위주2)
	*********************************************
		2개의 Array 객체안의 배열변수를 복사해서 붙여 새로운 Array 객체에 담아 객체의 메위주를 리턴.
	*********************************************
	$.unique(array객체 메위주)
	*********************************************
		Array객체 안의 중복 데이터를 제거한다.
		단 이웃하고 있는, 붙어있는 중복데이터만 지운다.
	*********************************************
	$.each(Array객체 메위주, function (index, value){실행구문})
	*********************************************
		Array 객체의 배열변수에 차례대로 접근해서 실행구문을 반복 실행한다.
	*********************************************
	$.each(JSON, function (key, value){실행구문})
	*********************************************
		JSON 객체 또는 일회성 사용자 정의 객체의 속성변수에 차례대로 접근해서 function(key, value){~}를 실행한다.
		key는 속성변수명, value에는 속성값이 전달된다.
		---------------------------------------------------------------------------
		<세끼문제> 기존 Array 객체에서 중복없이 배열변수안의 값을 복사해서 새로운 Array 객체에 저장하기
		---------------------------------------------------------------------------
				var xxxs = [1,1,2,2,3,4,1,3,2]
				var new_xxxs = [ ];
				for( var i=0 ; i<xxxs.length ; i++ ){
					var cnt = 0;
					for( var j=0 ; j<new_xxxs.length ; j++ ){
						if( xxxs[i]==new_xxxs[j] ){
							cnt++;
						}
					}
					if( cnt==0 ) { new_xxxs.push( xxxs[i] ); }
				}
	*********************************************
	$.ajax({JSON})
	*********************************************
	$.ajax({
		url:"서버 URL주소",
		type:"get 또는 post",
		data:"name값=value값&~" 또는 {name값:value값,~},
		dataType:"서버가 응답하는 페이지 종류",
		success: function(서버의응답물저장매개변수(=>responseHTML)){
			매개변수 responseHTML 안의 HTML소스 문자열에 DB 연동 결과물을 뽑아
			현재 화면에 반영하는 등의 소스가 나온다.
			통신 성공 시 실행할 코드
		},
		error: function(){
			통신 실패 시 실행할 코드
		}
	})
	*********************************************
	$(document).on(
		"이벤트명",
		"선택자",
		"function(){실행코드}
	)
	*********************************************
		[선택자]가 가리키는 기존 또는 추가 예정인 태그에 이벤트명에 해당하는 이벤트가 발생하면 실행코드를 실행한다
	*********************************************
	replaceWith("HTML소스")
	*********************************************
		현재 JQUery 객체가 관리하는 태그를 지정한 HTML소스 로 대체한다.
		즉 JQuery 객체가 관리하는 태그 없애고 HTML소스를 삽입한다.
	*********************************************
	wrap(선택자)
	*********************************************
		선택자가 가르키는 태그를 복사해서 현재 JQuery 객체가 관리하는 태그를 감싼다.
	*********************************************
	load("*.html 또는 *.txt")
	*********************************************
		현재 JQuery 객체가 관리하는 태그 내부에 지정한 파일 안의 내용을 덮어씌운다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> JQuery 객체의 속성변수의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	*********************************************
	length
	*********************************************
		현재 JQuery가 관리하는 태그의 개수가 저장되어 있따.
		<참고> 메소드 size()의 리턴값도 같다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> JQuery 객체의 메소드중 JQuery 객체의 메위주를 리턴하는 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	find
	filter
	children
	parent
	parents
	siblings
	next()
	nextAll()
	prev
	prevAll()
	eq
	first
	last
	add
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> JQuery 객체의 메소드중 문자열를 리턴하는 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	html
	text
	attr
	val
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> JQuery 객체의 메소드중 정수를 리턴하는 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	index
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> JQuery 객체의 메소드중 true, false를 리턴하는 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	is
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> JQuery 객체의 메소드중 삭제하는 기능을가진 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	remove
	empty
	removeClass
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<19> JQuery 객체의 메소드중 삽입하는 기능을가진 메소드를 모두 써라.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	text
	html
	append
	prepend
	before
	after
	attr
	addClass
	val