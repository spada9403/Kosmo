■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JAVASCRIPT 란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●html 언어에 부가되어 웹페이지를 좀 더 동적이고 다양하게 제작할 수 있는 기법을 제공하는 스크립트 언어의 일종이다.
        ●현재 대부분의 웹브라우저에서 자바스크립트 코딩을 읽어 기능을 구현하는 [java script 엔진]이 탑재되어 있다.
            ▶<참고> v8 => 구글의 크롬 브라우저와 안드로이드 브라우저에 탑재된 자바스크립트 엔진 이름이다.
        ●<참고> 스크립트 언어의 특징.
            ▶혼자 실행되지 못하고 다른 언어에 포함되어 실행된다.
            ▶스크립트 언어 종류 => JSP, ASP, PHP등.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JAVASCRIPT 의 기능이 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●입력 양식에 입력/선택된 데이터에 대한 검증을 한다. (=유효성 체크)
        ●태그의 속성값을 입력/수정/삭제 하거나 태그 자체의 입력/삭제 작업을 한다. 태그 컨트롤을 할 수 있다.
                <참고> 태그 컨트롤은 자바스크립트보다는 JQuery를 사용하는게 더 좋다.
        ●AJAX를 통하여 웹 서버와의 데이터 통신을 한다.
                ▶AJAX => 비동기 방식으로 웹서버와 통신한 후 통신 결과물을 현 화면에 반영하는데 사용되는 기술들을 총칭한다.
                        [XMLHttpRequest 객체/DOM/자바스크립트/css] 기술들을 총칭한다.
                ▶비동기 방식 => 페이지 이동 없이 웹서버와 통신하는 방식을 말한다.
                    예) 네이버 검색창에 키워드 입력시 관련검색어가 뜬다. 서버에서 관련검색어를 가져왔고, 페이지가 그대로 있기때문에 비동기 방식이다.
                ▶동기 방식 => 페이지가 이동하면서 웹서버와 통신하는 방식을 말한다.
                    예) 네이버 검색창에 키워드를 넣고 검색을 누르면 페이지가 바뀌면서 키워드와 관련된 검색결과들이 나오는데 이것이 동기이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JAVASCRIPT 의 장점이 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ● Server에서 Client 쪽으로 전달되어 실행이 되므로 Server에 부담을 주지 않는다.
        ● 변수, 연산자, 조건문, 반복문, 함수, 객체 등을 사용하여 프로그래밍의 수준에서 처리할 수 있게 한다.
        ● AJAX 기술을 사용하여 간접 DB연동이 가능하다.
        ● 문법이 자바나 c보다 간단하여 학습이 쉽다. <예> 모든 변수의 형식 검사를 하지 않음 등.
        ● [보안성], [소스 중요성]이 없는 역활은 JAVASCRIPT가 담당하고, 반대인 경우는 서버 쪽 프로그래밍 언어가 담당한다.
        ● 모바일 분야에서도 활용된다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> Javascript 단점이 뮘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●HTML 소스코드 안에 포함되어 있기 때문에 소스가 노출된다. 즉 클라이언트가 JAVA SCRIPT 소스를 볼 수 있다.
        ●JAVA, C 언어 같은 강력한 기능의 프로그램을 만들 수 없다. 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> Javascript 를 부르는 다른 이름이 있다는데 뮘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        JavaScript               -> Mozilla Firefox,Google Chrome,Apple Safari, Adobe Acrobat
        Internet Explorer        -> JScript
        Opera                    -> ECMAScript
        .NET                     -> JScript.NET
        Adobe Flash & Adobe Flex -> ActionScript
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> Javascript 는 html 안에서어디에 삽입됩니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        script태그 안에 삽입된다.
        <script>
                자바스크립트 코드;
        </script>
        <script>~</script>의 위치는 자스안에 함수가 있다면 head태그 안에 위치시키고 자스안에 함수가 없다면 원하는 실행 위치에 삽입한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> 2개 이상의 html안에서 동일한 자바스크립트 코드를 자주 사용할 경우 유지 보수가 힘들다.
        즉 자스코드가 변경 되면 모든 html 의 자스코드를 수정해야 한다.
        해결책?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        자스코드를 xxx.js 파일에 저장하고 각 html 에서 아래 처럼 수입하면 된다.
        <script src="xxx.js"></script>
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> 자바스크립트는 프로그래밍 언어이다. 자스에서 자료형의(=데이터 타입(=data type)) 종류는?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        (1)숫자형
                ▶정수, 실수 데이터를 말한다.
        (2)문자형
                ▶문자 데이터를 말한다.
                ▶"로 감싼다. <참고> '로 감싸도 되지만 되도록 "로 감싼다.
                ▶""또는 ''는 길이가 없는 문자 데이터이다.
        (3)boolean
                ▶true 또는 false데이터를 말한다. 진실이냐 거짓이냐
        (4)함수형
                ▶function(매개변수){실행구문;}의 형태 데이터를 말한다.
                ▶function(매개변수){실행구문;} 의 형태를 익명함수라고 부른다.
                ▶예) var doubleNum = function(num){return num*num;} 의 형태를 익명함수라고 부른다.
        (5)객체형
                ▶객체가 차지하는 메모리 공간의 위치 주소값을 말한다.
                ▶객체가 차지하는 메모리 공간의 위치 주소값을 알면 객체가 소유한 속성변수나 메소드를 호출할 수 있다.
                        객체 생성의 목적은 메소드나 속성변수 호출이다.
        (6)undefined
                ▶알 수 없는 데이터를 말한다. 즉 프로그램에서 사용할 수 없는 데이터를말한다.
                ▶위 5가지 자료형 이외의 자료형을 말한다.
                ▶"아 몰랑 데이터"
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 자바스크립트에서 변수 선언은 어떻게 할까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●변수 정의 => 데이터가 저장되는 [메모리의 기억장소]에 붙인 이름을 말한다.
                        [비유]음식을 담는 그릇과 동일한 개념이다.
        ●변수 사용 목적 => 데이터를 변수에 저장함으로써 재사용이 가능하다.
                          데이터를 변수에 저장하지 않으면 데이터를 재 사용할 수 없다.
        ●변수 선언 목적 => var(let) 변수명 = 데이터;
        ●변수명 제작 규칙
                ▶변수 이름은 [영문], [숫자],  _ , $ 로 만 구성된다. 단, 영문 중 예약어 (var, if 등)은 불가능하다.
                        ▶<주의>변수명의 중간에 공백이 있으면 안 된다. <참고>영문 대신 한글,일어,한자 등 도 가능하나 영문을 사용한다.
                        ▶변수명의 첫 글자로 숫자가 올 수는 없다.
                        ▶변수명은 영문 대, 소문자를 구별한다.
                        ▶관용적 변수명 제작 규칙
                                ▶영문, 숫자, _ 로 구성한다.
                                ▶변수명의 첫 글자는 영문으로 시작한다.
                                ▶3자 이상으로 제작한다.
                                ▶변수명을 보고 저장되는 데이터의 종류를 알 수 있도록 의미 있게 준다. (=가독성 있게 준다)
                        ▶변수명 사용 불가능 예 
                        =>273alpha, has space
                        =>break, else, instanceof, true, case, false, new, try, catch, finally, null. typeof, continue, for, return, var, default, function, switch 등
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> 자바스크립트에서 변수 종류는?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●전역변수
                ▶하나의 HTML파일 안의 모든 자바스크립트에서 공유 가능한 변수다.
                ▶주로 함수 밖에서 var를 붙이거나 var 없이 선언된 변수다.
        ●지역변수
                ▶함수 안에서 var로 선언되어 함수 안에서만 사용되는 변수다.
                ▶<주의>함수 안에서 var 없이 선언된 변수는 함수 밖에서도 호출 가능한 전역변수가 된다.
                ▶<예> function getTot(){var base = 80; ~}
        ●매개변수
                ▶함수 호출 시 전달되는 데이터를 저장하는 변수다.
                ▶함수 안에서만 사용가능한 지역변수이다.
                ▶<예>function 함수명( 매개변수 ){ 실행구문; }
                        function getTot( kor ){ ~ }
                ▶<주의>매개변수 앞에는 절대 var를 붙이지 않는다. 에러발생.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> 자바스크립트에서 함수가 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●[실행구문영역]에 이름을 붙여 선언한 후 필요 시점에 이름을 호출하여 [실행구문]을 실행하는 일종의 [단위 프로그램]이다.
        ●반복 사용하는 실행구문을 함수로 만들어 놓으면 보관이 용이하고, 언제든지 쉽게 호출하여 사용할 수 있다.
        ●<참고>함수 보다 더 조직적인 [단위 프로그램은] [객체]이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> 자바스크립트에서 함수의 종류.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●정적함수(선언적 함수)
                ▶[함수명]을 붙여 선언하는 함수
                ▶ 정적 함수의 형태.
                        ```Javascript
                        function 함수명( 매개변수 ){
                                실행구문;
                                [return [반환값]]
                        }
                        ```
                        대괄호 생략 가능.
                        매개변수는 0개 이상 나올 수 있고 ,로 나열함
                        매개변수 왼쪽에 자료형이 없다.(var, let, const 등)
                        ●함수명은 변수명 제작 규칙과 동일하다. <주의>함수명 호출 시 함수명 철자와 대소문자가 일치해야한다.
                        ●[매개변수]가 있을 경우 함수 호출 시 매개변수 개수와 자료형에 맞게 데이터를 전달하여 함수를 호출한다.
                        ●함수 안에서 return 반환값; 이 나오면 함수를 중단하고 함수를 호출한 곳으로 [반환값]을 리턴한다. 
                        ●함수 안에서 return; 이 나오면 함수를 중단만 한다.
                        ●<주의>동일한 이름의 정적 함수가 2개 이상 선언되면 마지막 정적함수가 진짜 정적함수이다.
        ●익명 함수
                ▶[함수명]없이 선언하는 함수로, 주로 변수에 저장한다. 즉 데이터의 한 종류이다.
                ▶ 익명 함수의 형태.
                        ```Javascript
                        function ( 매개변수 ){
                                실행구문;
                                [return [반환값]]
                        }
                        ```
                        대괄호 생략 가능.
                        매개변수는 0개 이상 나올 수 있고 ,로 나열함
                        매개변수 왼쪽에 자료형이 없다.(var, let, const 등)
                        함수 이름이 없고, 변수에 저장되는것이 특징.
        ●내장 함수
                ▶자주 사용되는 기능을 가지고 미리 만들어져 제공하는 함수.
                ▶alert("")
        ●사용자 정의 함수
                ▶개발자가 만들어 사용하는 함수. 사용자 정의 = 개발자가 직접 만든.
        ●내부 함수
                ▶함수 내부에 선언된 또 다른 함수.<주의>내장함수와 혼돈하지 말자.
        ●콜백 함수(callback function) (입사문제)
                ▶나중에 필요시 호출해서 사용하라고 전달해 주는 함수를 말한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> 내장 함수의 종류에는 뭐가 있나요?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●alert("문자열")
                ▶확인 버튼이 있는 [경고 상자]를 보여 준다.
        ●confirm("문자열")
                ▶확인버튼과 취소버튼이 있는 [경고 상자]를 보여준다.
                    확인 누르면 true, 취소누르면 false 리턴되는 특징이있다.
        ●prompt
                ▶[문자열입력상자]와 확인 버튼, 취소 버튼이 있는 상자를 보여주고 [확인] 누르면 입력문자열 리턴
        ●parseInt(숫자문자, 10)
                ▶10진수로 표현된 [숫자문자]를 [정수]로 리턴.
                ▶<참고>[숫자문자]가 실수인 경우 소수 첫째자리부터 모두 버림.
        ●Number( 데이터 )
                ▶데이터가 [숫자] 또는 [숫자문자]면 숫자 리턴. 아니면 naN 리턴.
                ▶<주의> 함수 이름이 대문자이다.
        ●isNaN( 데이터 )
                ▶데이터가 [숫자] 또는 [숫자 문자] false 리턴 , [순수 문자]면 true 리턴.
                ▶<참고> isNaN => Not A Number
        ●setInterval("자스코딩", n초*1000)
         setInterval( function(~){자스코딩;}, n초 * 1000)
         ▶n초 마다 자스코딩을 반복 실행한다. <주의>"자스코딩"에서 "를 빼면 안된다.
         ▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다.
        ●setTimeout("자스코딩", n초*1000)
         setTimeout( function(~){자스코딩;}, n초 * 1000)
         ▶n초 후에 자스코딩을 실행한다. <주의>"자스코딩"에서 "를 빼면 안된다.
         ▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다.
        ●typeof( 데이터 )
                ▶데이터의 자료형을 문자열로 리턴.
                ▶(예)typeof( 3 )                            => "number" 리턴
                ▶(예)typeof( "햄버거" )                     => "string" 리턴
                ▶(예)typeof( function 함수명(~){~} )        => "function" 리턴
                ▶(예)typeof( new Date() )                   => "Object" 리턴
                ▶(예)var xxx; typeof( xxx )                 => "undefined" 리턴
        ●eval( "문자열" )
                ▶문자열을 자바스크립트 실행 코드로 바꾸어 실행한다.
        ●기타등등.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> 객체(Object)가 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●[메모리] 공간에 존재하는 [단위 프로그램]으로 [메소드]와 [속성변수(=프로퍼티)]로 구성되어 있다.
            ▶속성변수(=프로퍼티)
                ▶메소드 안에서 사용할 데이터를 저장하고 있다.
            ▶메소드(=method)
                ▶실행구문이 저장되어 있다.
                ▶메소드명 호출 시 지정한 실행구문이 실행되면 경우에 따라 호출 후 리턴 값이 있을 수 있다.
                ▶메소드는 결국 함수와 동일하다. 즉 함수가 객체안에서는 메소드로 불리운다.
        ●[객체]의 [속성변수]를 호출하여 저장된 데이터를 얻거나 데이터를 저장할 수 있고,
            [메소드]를 호출함으로써 특정 실행구문을 반복 실행 할 수 있다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> 자바스크립트에서 사용 가능한 객체(Object) 종류에는 뭐가 있나?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●DOM(=Document Object Model) 객체
            ▶W3C 라는 단체가 [여러 브라우저 제작사]들과 협력하여 제작한 객체이다.
            ▶대부분의 브라우저에서 DOM 객체를 사용할수 있다.
            ▶DOM 객체의 기능
                HTML [태그]의 각종 정보를 소유하고, [태그]에 대응하는 [컨텐츠]를 [웹 브라우저 화면]에 출력한다.
                <참고> W3C => 웹을 위한 표준을 연구/개발하고 장려하는 단체이다.
            ▶DOM 객체에 대한 설명
                    xxx.html 파일안에 <input type="text" name = "uid"> 라는 태그 있다면
                    웹브라우저 이 태그를 읽어들이면서 다음과 같은 진행을 가진다.
                    (1)웹 브라우저가 <input type="text" name = "uid">를 읽어들인다
                    (2)Text 객체 생성된다. Text 객체의 속성변수에는 name, type, value 등등이 있다.
                        name 속성변수에는 문자 "uid"가 저장되어 있고
                        type 속성변수에는 문자 "text"가 저장되어 있고
                        value 속성변수에는 유저가 입력한 데이터가 저장되어 있다.
                    (3)Text 객체에 대응하는 입력양식에 웹브라우저에 출력된다.
                    (4)웹브라우저에서 입력양식에 데이터를 입력하면 Text객체의 value속성에 입력한 데이터가 저장된다.
                        즉 웹브라우저의 입력양식과 Text객체의 value 는 sync가 된다.
                        만약 자스코딩으로 Text객체에 접근해서 value속성 변수안에 데이터를 삽입하면
                        웹브라우저 입력양식에 그대로 보인다.
        ●BOM 객체
                ▶브라우저 제작사 별로 자체 제작한 객체를 말한다.
                ▶주로 페이지 이동, 모니터 정보 관리, 새 웹브라우저 화면 띄우기, 방문한 URL 주소 관리, 
                        웹브라우저 종류/버전 관리, 이벤트 관리 등의 기능을 가진다.
                ▶location.replace("URL주소")
                        location 변수안에 Location 객체의 메위주가 들어 있다.
                        location 변수는 웹브라우저가 만들어저 제공하는 변수이다.
                ▶<주의>브라우저 제작사 별로 만든 [객체]이므로 
	                한번 작성된 BOM 객체 메소드나 속성변수 호출 코딩은
	                브라우저 종류별이나 버전별로  동일한 결과를 생성하지 못하거나 오류가 발생하기도 한다.


        ●자바스크립트 내장 객체
            ▶자바스크립트 차원에서 미리 만들어 저장된 객체를 말한다.
            ▶각종 데이터를 생산/관리한다.
            ▶예> var today = new Date(); // 날짜를 관리하는 Date 객체 생성하고 객체의 메위주를 today변수에 저장한다.
            ▶예> 지금 이 순간의 년도를 얻어서 thisYear 라는 변수에 저장하고 싶다면
                        아래 처럼 Date 객체를 생성하고 getFullYear 메소드를 호출하면 된다.
                        ▶var today = new Date();
                        ▶var thisYear = today.getFullYear();
        ●자바스크립트 사용자 정의 객체
            ▶자바스크립트 문법에 맞추어 개발자가 직접 만들어 저장한 [생성자 함수]로부터 만들어지는 객체를 말한다.
            ▶[생성자 함수]는 일반 함수와는 다르게 객체의 전신으로써 속성변수와 메소드가 선언되어 있다.
                저자에 따라 [생성자 함수]를 클래스 라고 부르기도 한다.
            ▶자바스크립트 사용자 정의 객체는 주로 웹 관련 솔루션에서 만들어 사용한다.
        ●JQuery 객체
            ▶특정 단체에서 만들어 무료로 제작되어 배포되는 사용자 정의 객체 중의 하나이다.
            ▶장점
                ▶개발자, 디자이너, 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
                ▶크로스 브라우저, 대부분의 브라우저에서 동일한 실행 결과를 가진다.
            ▶단점
                ▶정해진 코딩 패턴이 없다. 즉 개발자 마다 다양한 코딩을 하게 되므로 유지 보수가 힘들다.
                    그래서 요즘 현업에서는 JQuery 객체 대신에 react를 많이 사용하고 있다.
                    <참고>react 다음에 Vue가 사용될 것 같다.
                ▶<참고> react
                        자바스크립트로 화면 UI를 만들수 있는 독단적인 플랫폼이다.
                        nodeJS를 기반으로 작동한다.
                        퍼즐 맞추듯이 미리 만든 조각들을 모아 화면을 구성하므로 코딩 재사용성이 좋다.
                        일전한 코딩 패턴으로 유지보수성이 좋고
                        웹브라우저 부하를 적게 준다.
            ▶기능
                ▶개발자 원하는 강력한 기능을 지원한다.
                    ▷DOM 객체를 쉽게 컨트롤 할 수 있어 컨텐츠의 추가/수정/삭제가 쉽다.
                    ▷비동기 방식으로 서버와 통신을 지원한다.
                    ▷에니메이션 관련 작업을 지원한다.
                    ▷[이벤트] 설정 및 처리를 지원한다. 등등
            ▶사용방법
                웨브라우저에 기본적으로 내장되지 않아서 수입해야 한다.
                즉 온라인 상에서 무료로 제공되는 [jquery-xxx.js] 파일을 다운로드 한 후
                html 파일 안에서 수입해야 한다.
            ▶JQeury 객체를 생성하고 메모리 위치 주소값을 얻는 방법.
                    var 변수명 = $("태그를 지칭하는 선택자");
                    변수명.JQeury객체메소드
                    변수명.JQeury객체속성변수
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> 자바스크립트 내장 객체의 종류와 메소드/속성변수 정리.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●Array 객체
            ▶같은 유형 또는 다른 유형의 다수 데이터를 [순차적]으로 저장하여 관리하는 내장 객체이다.
            ▶다량의 데이터 저장하고 관리하는 객체.
            ▶객체 생성 & 데이터 저장 방법. => (1)var 변수명 = new Array(데이터1,~,데이터 n); << 잘 안쓴다.
                                              (2)var 변수명  = new Array();
                                                        변수명.push(데이터1);
                                                        ~
                                                        변수명.push(데이터n);
                                              (3)var 변수명  = new Array();
                                                        변수명[0] = 데이터1;
                                                        ~
                                                        변수명[n] = 데이터n;
                                              (4)var 변수명 = [데이터1,~,데이터n];
                                              (5)var 변수명 = [];
                                                        변수명.push(데이터1);
                                                        ~
                                                        변수명.push(데이터n);
            ▶Array 객체의 메소드 종류
                ▶ push(데이터);             =>  Array 객체안에 마지막에 배열변수 만들고 그 배열 변수에 데이터 저장하기.
                ▶ join("연결문자");         =>  Array 객체가 소유한 모든 저장 데이터를 연결문자로 연결하여 문자열로 리턴.
                ▶ reverse()                 =>  배열변수 안의 데이터의 순서를 거꾸로 뒤집음.
                ▶ pop()                     =>  마지막 배열변수안의 데이터를 리턴하고 마지막 배열변수를 제거함
                ▶ concat(다른 Array 객체)   =>  현 Array 객체와 다른 Array 객체의 배열변수를 복사해서 새로운 Aray 객체 안에
                                                    저장하고 새로운 Array 객체를 리턴함.
                ▶sort()                     =>  저장된 데이터를 문자열 취급해 오름차순 정렬.
                                                    숫자가 아닌 문자가 저장되어 있을때 정렬시 사용하는 메소드다.
                -----------------------------------------------------------------------------------------
                sort( function(left,right){return left-right;} )
                ------------------------------------------------------------------------------------------
                    ▶저장된 숫자 데이터를 오름차순 정렬	
                    ▶<예>var kors = [3,20,10]; kors.sort(function(left,right){return left-right;}) ;   
                                    // 정렬순서는 3 10 20 이다.

                ------------------------------------------------------------------------------------------
                sort( function(left,right){return right-left;} )
                ------------------------------------------------------------------------------------------
                    ▶저장된 숫자 데이터를 내름차순 정렬
                    ▶<예>var kors = [3,20,10]; kors.sort(function(left,right){return right-left;}) ;   
                                    // 정렬순서는 20 10 3 이다.
                ▶slice(시작인덱스번호, 끝인덱스 번호)           
                    ▶지정한 범위를 복사해서 새로운 Array 객체로 리턴.
                ▶splice((시작인덱스번호, 개수)        
                    ▶지정한 시작 인덱스번호 부터 개수만큼 오려내서 Array 객체로 리턴
            ▶Array 객체의 속성변수
                ▶length             =>  배열변수의 개수 저장되어 있다.
        ●Date 객체
            ▶년,월,일,시,분,초 관리하는 객체이다.
            ▶객체 생성, 메소드 호출, 속성변수 호출 방법
                    객체 생성   =>  var 변수명 = new Date( 년, 월, 일, 시, 분, 초);
                    메소드 호출 =>  객참변수.메소드(~);
                    <주의>new Date() 년월일등을 세팅하지 않으면 현재 시스템 날짜가 세팅된다.
                    <주의>년,월,일 만 세팅하면 시,분,초는 0,0,0으로 세팅됨.
                    // >> 아니다. getMonth() 호출때만 -1되서 나오는거고 세팅은 그대로 넣어줘라.<주의>Date 객체는 월을 0~11 까지의 숫자로 관리하므로 항상 세팅 시 월은 -1한 다음 삽입한다.
            ▶Date 객체의 메소드
                    getFullYear()   =>  Date 객체에 세팅된 연도를 리턴.
                    getMonth()      =>  Date 객체에 세팅된 월(0~11)를 리턴.
                    getDate()       =>  Date 객체에 세팅된 일(1~31)를 리턴.
                    getDay()        =>  Date 객체에 세팅된 요일(0(일)~6(토))을 리턴
                    getHours()      =>  Date 객체에 세팅된 시간(0~23)을 리턴
                    getMinutes()    =>  Date 객체에 세팅된 분(0~59)을 리턴
                    getSeconds()    =>  Date 객체에 세팅된 초(0~59)을 리턴
                    getTime( )      => [1970년1월1일0시0분0초] ~ [Date 객체의 기억날짜] 까지의 차이를 초*1000 으로 리턴.
                                        주 용도는 두 날짜의 차이를 구할 때 사용하는 메소드이다.
                                        예>var date1 = new Date(1999, 0, 11);
                                            var date2 = new Date(2021, 6, 7);
                                            var interval = (date2.getTime() - date1.getTime())/1000;
                    setFullYear(년도) => Date 객체에 연도를 세팅한다
                    setMonth(월-1 )   => Date 객체에 월을 세팅한다
                    setDate(일 )      => Date 객체에 일을 세팅한다
                    setHours(시 )     => Date 객체에 시를 세팅한다
                    setMinutes(분 )   => Date 객체에 분을 세팅한다
                    setSeconds(초 )   => Date 객체에 초를 세팅한다
            ▶Date 객체의 예제
                현재 지금 날짜의 년월일을 구해 변수 year, month, date에 저장하기
                        var today = new Date();
                        var year = today.getFullYear();
                        var month = today.getMonth()+1;
                        var date = today.getDate();
                현재 지금 날짜에서 올해 크리스마스 날까지 며칠 남았는지 구해서 변수 interval 저장.
                        var today = new Date();
                        var critmas = new Date(today.getFullYear(),11,25);
                        var interval = ((critmas.getTime() - today.getTime())/1000)/(60*60*24);
                        2031년 2월달의 마지막 일을 구해 변수 xxx에 저장.
                        val today = new Date(2031,2,1-1);
                        val xxx = today.getDate();
                        val xxx
                 년월일 구해 변수 year, month, date저장 
                        val xxx_day = new Date();
                        xxx_day.setDate(xxx_day.getTome()+1000);
                        val year = xxx_day.getDate() 
                        val year =  xxx_day.getMonth() +1;
                        val date =  xxx_day.getDate();
                현재 지금 날짜에서 요일뽑아서 week 변수에 저장.
                    var today = new Date( );
                    var week = today.getDay( );
                    if( week==0 ) { 
                        week = "일요일";
                    }
                    else if( week==1 ) { 
                        week = "월요일";
                    }
                    else if( week==2 ) { 
                        week = "화요일";
                    }
                    else if( week==3 ) { 
                        week = "수요일";
                    }
                    else if( week==4 ) { 
                        week = "목요일";
                    }
                    else if( week==5 ) { 
                        week = "금요일";
                    }
                    else if( week==6 ) { 
                        week = "토요일";
                    }
        ●String 객체
            ▶[문자열]을 관리하는 객체이다.
            ▶String 객체 생성,메소드/속성변수 호출 방법.
                    ▶String 객체 생성                       =>  var 변수명 = "문자열"; 또는 var 변수명 = new String("문자열");
                    ▶String 객체 메소드/속성변수 호출       =>  변수명.메소드(~) 변수명.속성변수
                    ▶length
			            ->String 객체가 소유한 문자열의 길이가 저장되어있음.
            ▶String 객체의 메소드
                    ▶charAt(인덱스번호)
                        ->인덱스번호에 위치하는 문자 한개를 복사해서 리턴. 인덱스 번호는 0부터 시작한다.
                        -> var uname = "성이현"; var firstName = uname.charAt(0);
                    ▶concat("문자열")
                        ->String 객체가 소유한 문자열 복사해 [더할 문자열]을 연결하여 새로운 String객체로 리턴.
                    ▶indexOf( 찾는문자, 검색시작 인덱스 번호)
                        ->String 객체가 소유한 문자열에서 찾는문자가 위치한 곳의 인덱스 번호를 리턴.
                            단 검색 시작은 검색 시작 인덱스번호부터 시작한다.
                            단 검색 방향은 왼쪽에서 오른쪽으로 검색한다. 앞부터 뒤진다.
                            만약 리턴값이 -1이면 찾는문자가 없다라는 뜻이다.
                            인덱스 번호 생략가능. -> 생략하면 처음부터 검색.
                            ----------------------------------------
                            var uname="박세리"; 에서 uname 저장된 이름에 성이 박 이면 xxx 변수에 "박씨가문" 저장하기
                            ----------------------------------------
                            var uname="박세리";
                            if( uname.indexOf("박")==0 ){
                                var xxx = "박씨가문";
                            }
                            ----------------------------------------
                            var fruit = "수박 참외 파인애플 복숭아"; 에서 fruit 저장된 복숭아 가 있으면 xxx 변수에 "있음" 저장하기
                            ----------------------------------------
                            var fruit = "수박 참외 파인애플 복숭아";
                            if( fruit.indexOf("복숭아")>=0 ){
                                var xxx = "있음";
                            }
                    ▶lastIndexOf("찾는문자", 검색시작인덱스번호)
                        ->String 객체가 소유한 문자열에서 "찾는문자"가 위치한 곳의 인덱스 번호를 리턴
                            단 검색 시작인덱스번호 부터 검색한다.
                            단 검색 방향은 오른쪽에서 왼쪽으로 검색한다. 뒤부터 뒤진다.
                    ▶replace("찾는문자", "대체문자")
                        ->String 객체가 소유한 문자열 복사해 [찾는문자]를 [바꿀문자]로 대체하여 리턴. 
                          단 처음 나오는 것만 바꿈.
                    ▶substr(인덱스번호, 개수)
                        ->인덱스번호부터 지정개수만큼 문자열을 복사해 리턴.
                    ▶substring(시작인덱스번호, 끝 인덱스 번호)
                        ->시작인덱스번호 붙어 끝인덱스번호 이전 까지 문자열을 복사해 리턴.
                    ▶split("분리문자")
                        ->String 객체가 소유한 문자열 복사해 분리문자로 문자열을 분리해서 
                          Array 객체에 저장하여 Array 객체를 리턴.
                    ▶toLowerCase()
                        ->String 객체가 소유한 문자열 복사해서 소문자로 바꾸어서 리턴.
                    ▶toUpperCase()
                        ->String 객체가 소유한 문자열 복사해서 대문자로 바꾸어서 리턴.
                    ▶trim()
                        ->String 객체가 소유한 문자열 복사해 문자열의 앞뒤 [공백]을 제거한 문자열을 리턴.
                        -><주의>Explorer 는 Explorer9 부터 지원함.
                    ▶match("찾는문자")
                        ->String객체가 소유한 문자열 내에 [찾는문자]가 있으면 [찾는문자] 복사해서 return. 없으면 null return.

                    ▶기타등등.
                    문제>
                    var uid = "abc123";
                    var alphabet = "abcdefghijklmnopqrstuvwxyz";
                    var num = "0123456789";
                    var cnt = 0;
                    var xxx = "적합";
                    //-----------------------------------
                    // 아이디 첫글자가 영문소문자가 아니면 cnt 변수 1업그레이드하기
                    //-----------------------------------
                    if( alphabet.indexOf(uid.chatAt(0))<0  ){
                        cnt++;
                    }
                    //-----------------------------------
                    // 아이디 길이가 5 미만이면 cnt 변수 1업그레이드하기
                    //-----------------------------------
                    if( uid.length<5  ){
                        cnt++;
                    }
                    //-----------------------------------
                    // 아이디가 숫자와 영문소문자로 구성되 있지 않으면 cnt 변수 1업그레이드하기
                    //-----------------------------------
                    for( var i=0 ; i<uid.length ; i++ ){
                        var str = uid.chatAt(i);
                        if( alphabet.indexOf(str)<0 && num.indexOf(str)<0 ){
                            cnt++;
                        }
                    }
                    //-----------------------------------
                    // 아이디가 조건에 안맞으면 xxx 변수에 "부적합" 저장하기
                    //-----------------------------------
                    if( cnt>0  ){
                        xxx = "부적합";
                    }
        ●Math 객체
            ▶수학적 계산을 하는데 도움이되는 메소드를 제공하는 객체이다.
            ▶객체생성, 메소드 호출, 속성변수 호출방법
                    객체생성        =>      객체 생성 코드 업음
                    메소드 호출     =>      Math.메소드(~)
            ▶Math 객체의 메소드
                    ceil( v )               => v 값의 소수 첫째 자리를 올림해서 정수로 리턴
                    floor( v )              => v 값의 소수 첫째 자리를 버림해서 정수로 리턴
                    round( v )              => v 값의 소수 첫째 자리를 반올림해서 정수로 리턴
                    max( 숫자1, ~, 숫자n )  => 숫자1 부터 숫자n 까지 중 최대값을 리턴
                    min( 숫자1, ~, 숫자n )  => 숫자1 부터 숫자n 까지 중 최소값을 리턴
                    random( )               => 0 이상 1 미만의 무작위 실수를 리턴
                    abs(x)                  => x 값의 절대값을 리턴. 양의 수로 바꾸라.
                    pow( x, y )             => x 의 y 승을 리턴.  pow( 3, 2 )
                    log(x)                  => 로그 함수를 계산해서 리턴
                    sin(x)                  => sin 값을 리턴
                    cos(x)                  => cos 값을 리턴
                    tan(x)                  => tan 값을 리턴
                    기타 등등

                ------------------------------------------------
                ●Math 객체의 속성변수
                ------------------------------------------------
                    PI                    => 원주율을 리턴
                    E                     => 오일러 상수값을 리턴
                    기타 등등
        ●RegExp 객체
            ▶문자열의 패턴을 관리하는 객체이다. <참고> RegExp 는 Regular Expression(정규 표현식)의 약어이다.
            ▶객체 생성, 메소드 호출, 속성변수 호출 방법
                    var 변수명 = new RegExp( 패턴식 );
                    var 변수명 = 패턴식;
                    ▶<주의> 자스에서는 패턴식에 " 또는 ' 로 감싸지 않는다. 자바에서는 패턴식에 감쌈다.
            ▶메소드 호출, 속성변수 호출 방법
                객참변수.속성변수
                객참변수.메소드(~)
            ▶RegExp 객체의 메소드
                test("문자열")  =>  문자열이 객체 생성 시 지정한 패턴식을 만족하면 true 리턴, 아니면 false 리턴.
                예> var uid = "abc123";
                    var regExp = new RegExp(/^[a-z][0-9_]{4,9}$/);
                    var flag = regExp.test(uid);
                ▶패턴식 예
                    핸드폰 번호 패턴식  =>  /^(010|011|016|017|018|019)-[0-9]{3,4}-[0-9]{4}$/
                    한글 이름 2~20자    =>  /^[가-힣]{2,20}$/
                    "abc" 문자의 존재   => /abc/
                    공백 존재           => /[ ]+/
                    e-mail 형식         => /^([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-z-A-Z_-]+){1,2}$/
                    임의 문자 3개로 만 구성=>/^...$/
                    abc로 시작하고 xyz로 끝남=> /^(abc).*(xyz)$/
                ▶패턴식 키워드
                    ^   =>  ^의 오른쪽 문자가 시작임을 의미
                    $   =>  $의 왼쪽 문자가 마지막임을 의미
                    \s  =>  [ ] 과 동일.
                    \w  =>  \w 가 아닌 것. [^a-zA-Z0-9]와 동일
                    \   =>   \뒤의 문자를 문자열로 취급
                                예> (/^([a-zA-z0-9_-]+)@([a-z]+)(\.[0-9a-zA-Z_-]+){1,2}$/) \. 에서 .이 문자로 나온다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<17> 예외(Exception)이란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        JS에서 [예외]란 웹브라우저가 [감지]할수 있는 오류를 말한다.
        <주의>감지할 수 없는 오류는 예외가 아니다. <예> 브라우저가 실행되고 있는 기기의 전원이 꺼짐.
        예외가 발생하면 예외를 관리하는 객체가 생성된다.
        예외를 관리하는 객체의 메소드나 속성변수를 호출하면 예외의 정보를 알 수 있다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> 예외 발생하면 대부분 프로그램이 중단되는데 중단시키지 않고 프로그램을 지속하고 싶을때 쓰는 구문은?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        예외가 발생할 경우
        try{
                ~~
        } cathch(Exception e){
                ~
        } finally {
                ~~
        }
        구문을 사용하여 프로그램의 갑작스러운 중단을 막고 원하는 방향으로
        프로그램을 진행할 수 있다. 이런 처리를 [예외 처리] 라고 한다. (=Exception Handling)
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<19> 예외 처리하면 개발자는 무슨 이득이 있나요?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        프로그램의 갑작스런 중단을 막고
        원하는 방향으로 프로그램을 진행 할 수 있다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<20> BOM(=Browser Object Model)객체의 종류와 메소드/ 속성벼수 정의.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●브라우저 제작사 별로 자체 제작된 객체를 말함.
        ●객체 생성, 속성변수/ 메소드 호출 형식.
                ->객체 생성 코드        => 없음. 이미 객체는 생성되어 있고 심지어 변수까지 미리 만들어 객체를 저장하고 있다.
                ->메소드 호출 코드      => 미리제공되는 변수.메소드명(~)
                ->속성변수 호출 코드    => 미리제공되는 변수.속성변수
                예) location.replace("xxx.html");
        ●Window 객체
                ->현재 [웹 화면]을 관리하는 객체이다.
                메소드 호출 코드        => window.메소드(~)
                속성변수 호출 코드      => window.속성변수
                window 객체 메소드
                        open( "url주소" , "창이름" , "창옵션" )
			        ▶새로운 웹화면을 생성하고 이 웹화면을 관리하는 window 객체를 생성
			        ▶<참고>보안 문제로 사용빈도가 줄어들고 있다.     
                        close( )
			        ▶웹화면을 닫음
                        focus( )
			        ▶웹화면에 초점을 맞춤
		        blur( )
			        ▶웹화면에서 초점을 제거
                        moveTo( x좌표, y좌표 )
                                ▶웹화면을 지정한 절대적 위치로 이동. 
                                x좌표는 웹화면 왼쪽에서 떨어진 거리. y좌표 웹화면 위쪽에서 떨어진 거리
                        resizeTo( 너비, 높이 )
                                ▶웹화면을 지정한 절대적 크기로 변경
                        기타등등
                window 객체 속성변수
                        innerHeight
                                ▶ 실제로 문서가 출력될 부분의 높이를 저장.
                        innerWidth
                                ▶ 실제로 문서가 출력될 부분의 넓이를 저장.
                        status
                                ▶ 화면의 상태 지시자에 표시될 내용을 지정
                        defaultSatetus
                                ▶ status 속성으로 지정되지 않은 상태에서 화면의 상태 지시자에 표시될 내용을 지정.
                        onload
                                ▶ body 태그 안의 내용물을 다 읽어들인 후 실행할 익명함수를 저장한다.
                                예> window.onload = function(){alert("오늘점심은 햄버거");}
                        기타등등
        ●Location 객체
                현재 열려진 웹화면의 [URL]주소 와 그에 관련된 각종 정보를 관리.
                메소드 호출 코드                => location.메소드(~);
                속성변수 호출 코드              => location.속성변수
                ---------------------------------
                Location 객체 속성변수
                ---------------------------------
                        port      => 웹브라우저가 사용하는 port 번호가 저장되어 있다.
                        protocol  => 웹브라우저가 사용하는 protocol dl 저장되어 있다.
                                        <참고>protocol(프로토콜) => 통신규약. 통신방법. 
                                                인터넷 할 때 사용하는 프로토콜이 HTTP 프로토콜이다
                        href      => 웹페이지의 URL 주소를 알려주거나 지정한  URL 주소의 페이지를 열어준다.
                                        -----------------------------------
                                        location.replace("xxx.html");    => 현재 화면에 xxx.html 를 열어라
                                        -----------------------------------
                                        location.href = "xxx.html";     => 현재 화면에 xxx.html 를 열어라
                                        -----------------------------------
                                        var url = location.href;        => 현재 웹화면의 URL 주소의 문자열을 얻어서 변수 url 에 저장하라
                        hostname  =>    URL 주소의 호스트 이름이나 IP 주소를 알려준다.
                        host      =>    URL 주소의 호스트 이름과 포트를 알려준다.
                Location 객체 메소드
                        replace("URL주소")      => url주소로 페이지를 이동
                        reload()                => 현재 웹 화면에 있는 페이지를 다시 읽어 들인다.

        ●History 객체
                웹 브라우저의 History List(방문한 적이 있는 URL 주소)를 관리한다.
                메소드 호출 코드        => history.메소드(~)
                속성변수 호출 코드      => history.속성변수
                Hisory 객체 메소드
                        go( 이동개수 )  => 히스토리 리스트가 기억하고 있는 주소로 이동.
                                                양의 정수일 경우 앞으로 이동.
                                                음의 정수일 경우 뒤로 이동.
                        forwar()        => 현재 페이지를 이전 페이지로 이동. go(-1) 와 동일.
                        back()          => 현재 페이지를 이전 페이지로 이동. go(-1) 와 동일.
                History 객체 속성변수
                        length          => 히스토리 리스트에 포함된 URL 주소의 개수.
        ***********************************
        ●Event 객체 ******
        ***********************************
                ---------------------------------------------------------
                웹화면에서 발생하는 모든 움직임(≒이벤트)을 관리하는 객체이다.
                Event 객체의 속성변수 안에는 각종 이벤트 관련 정보가 저장되어 있다.
                ---------------------------------------------------------
                속성변수 호출 코드  => event.속성변수
                ---------------------------------------------------------
                Event 객체의 속성변수
                ---------------------------------------------------------
                        button    => 클릭한 마우스 버튼의 고유 번호가 저장됨.
	                     (1번-왼쪽버튼, 2번-오른쪽 버튼, 3번-가운데 버튼.  마우스 제조사별로 버튼 번호가 약간 다르다.)
                        keyCode** => 누른 키보드의 고유 번호가 저장됨. 예>엔더키 치면 keyCode 에 13이 저장된다.
                        clientX   => 웹브라우저 화면의 X좌표 위치가 저장된다. 스크롤은 무시한다. 웹브라우저 화면 좌측 상단 맨위를 0,0 으로본다.
                        clientY   => 웹브라우저 화면의 Y좌표 위치가 저장된다. 스크롤은 무시한다. 웹브라우저 화면 좌측 상단 맨위를 0,0 으로본다.
                        screenX*  => 각자 모니터 화면 전체를 기준으로 이벤트가 발생할 X 좌표가 저장됨
                        screenY*  => 각자 모니터 화면 전체를 기준으로 이벤트가 발생할 Y 좌표가 저장됨
                        altKey    => Alt 키의 누름 상태 여부가 true, false 값으로 저장됨
                        ctrlKey   => ctrl 키의 누름 상태 여부가 true, false 값으로 저장됨
                        shiftkey  => Shift 키의 누름 상태 여부가 true, false 값으로 저장됨
                        type      => 이벤트의 종류가 저장됨
        ***********************************
        ●Screen 객체
        ***********************************
                ---------------------------------------------------------
                현재 모니터의 해상도, 색상, 화면의 크기 등에 관한 정보를 제공한다.
                ---------------------------------------------------------
                속성변수 호출 코드  => screen.속성변수

                ---------------------------------------------------------
                Screen 객체의 속성변수
                ---------------------------------------------------------
                        ----------------------------------------------
                        height**    => 모니터 전체의 높이를 픽셀 단위로 알려줌
                        width**     => 모니터 전체의 너비를 픽셀 단위로 알려줌
                        ----------------------------------------------
                        availHeight => 웹페이지가 나타날 실제 화면의 높이를 알려줌
                        availWidth  => 웹페이지가 나타날 실제 화면의 너비를 알려줌
                        pixelDepth  => 한 픽셀당 비트수를 알려줌 (explorer 에선 안됨)
                        colorDepth  => 사용 가능한 색상수를 알려 준다
        ***********************************
        ●Navigator 객체
        ***********************************
                웹 페이지를 실행하고 있는 [브라우저에 대한 각종 정보] 를 알려준다.
                속성변수 호출 코드      => navigator.속성변수
                Navigator 객체의 속성변수
                        appCodeName     => 웹브라우저의 코드명 저장 
                        appName         => 웹브라우저의 이름 저장
                        appVersion      => 웹브라우저의 버전 저장
                        platform        => 웹사용중인 운영체제의 시스템 환경 정보 저장.
                        userAgent       => 웹브라우저의 전체적인 정보 저장
        ***********************************
        ●Document 객체
        ***********************************
                HTML 문서의 정보(제목, 변경 날짜, 시간 등)을 관리한다.
                메소드 호출 코드        => document.메소드(~)
                속성변수 호출 코드      => document.속성변수
                Document 객체의 속성변수
                        title
                        locationlastModified
                        등등
                Document 객체의 메소드
                        write("html소스")  => html소스를 리턴한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<21> DOM(=Document Object Model)객체의 종류와 메소드/ 속성벼수 정의.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●DOM 객체는 주로 HTML 에서 [태그]를 관리하는 객체이다.
        ●[웹브라우저]가 HTML 파일 안의 태그들을 읽어 [객체]를 생성하고, 이 [객체]에 대응하는 [컨텐츠]를 [웹브라우저 화면]으로 출력한다.
        ●개발자 관점에서는 DB와 연동되는 입력양식 관련 태그들이 중요하므로 입력양식 관련 태그들의 DOM 객체를 중점적으로 다룬다.
        ***********************************
        ●Form 객체
        ***********************************
                [Form 태그] 관리하는 객체이다.
                객체 생성 코딩          => 없음. 미리 객체가 생성되어 제공된다.
                메소드 호출 코딩        => document.Form태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.속성변수
                Form 객체 속성변수 
                        action          => form 태그 안의 입력양식에 입력(선택)된 데이터를 보낼 [웹 서버 쪽 URL 주소]를 저장한다.
                        method          => 웹 서버로 데이터를 보내는 방법을 저장한다.
                                                ▶get    => 입력(선택) 데이터가 URL 뒤에 붙어 전송.
                                                ▶post   => 입력(선택) 데이터가 안보이게 전송.
                        enctype         => 파일을 웹서버로 전송할 경우에
                                                enctype 속성변수 안에 "multipart/form-data" 가 저장되어 있어야 한다.
                        target          => 웹서버에서 접속한 후 웹서버가 전송해주는 응답을 받을 창이 어디인지 알려줌
                Form 객체 메소드 
                        submit( )       =>form 태그 안의 입력 양식에 입력(선택)된 모든 내용을 서버에 보낸다.
                                                        서버쪽 URL주소는 action 속성변수 안의 값을 사용한다.
                        reset( )        =>form 태그 안의 입력 양식에 입력(선택)된 모든 내용을 초기값으로 변경한다.
                                                즉 데이터 비우거나 체크를 풀어버린다.
        ***********************************
        ●Text 객체
        ***********************************
                <input type="text"~/> 태그를 관리하는 객체이다.
                메소드 호출 코딩        => document.Form태그name값.input태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.input태그name값.속성변수
                Text 객체 속성변수
                        value           => [문자입력상자]에 입력된 데이터가 저장되어 있다.
                        defaultValue    => [문자입력상자]가 처음 나타날 때 표시된 내용을 설정한다.
                                                <주의> value 속성값이 변경되더라도 defaultValue 속성값은 영향을 받지 않는다.
                Text 객체 메소드
                        focus()         => [문자입력상자] 안에 커서를 들여 놓는다
                        blur()          => [문자입력상자] 안에 커서를 뺀다.
                        select()        => [문자입력상자] 안을 드래그 하여 입력 내용을 선택하도록 한다.
        ***********************************
        ●Password 객체
        ***********************************
                 <input type="password"~/> 태그를 관리하는 객체이다.
                 위 태그가 실행되어 웹브라우저에 출력될 때 [암호문자입력상자]라고 부른다.
                메소드 호출 코딩        => document.Form태그name값.input태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.input태그name값.속성변수
                password 객체의 속성변수/메소드 는 Text객체의 메소드와 동일하다.
        ***********************************
        ●Textarea 객체
        ***********************************
                <Textarea name="" ~>~</Textarea> 태그를 관리하는 객체이다.
                위 태그가 실행되어 웹브라우저에 출력될 때 [다중문자입력상자]라고 부른다.
                메소드 호출 코딩        => document.Form태그name값.Textarea태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.Textarea태그name값.속성변수
                Textarea 객체의 속성변수/메소드 는 Text객체의 메소드와 동일하다.
        ***********************************
        ●Hidden 객체
        ***********************************
                <input type="hidden"~/> 태그를 관리하는 객체이다.
                위 태그가 실행되어 웹브라우저에 출력될 떄 [숨겨진 입력 상자]라고 부른다.
                메소드 호출 코딩        => document.Form태그name값.input태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.input태그name값.속성변수
                hidden 객체의 속성변수/메소드 는 Text객체의 메소드와 동일하다.
        ***********************************
        ●FileUpload 객체
        ***********************************
                <input type="FileUpload"~/> 태그를 관리하는 객체이다.
                위 태그가 실행되어 웹브라우저에 출력될 떄 [파일입력상자] 라고 부른다.
                메소드 호출 코딩        => document.Form태그name값.input태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.input태그name값.속성변수
                FileUpload 객체의 속성변수/메소드 는 Text객체의 메소드와 동일하다. 다만, value라는 속성변수에는 선택한 파일의 이름이 저장된다.
        ***********************************
        ●Radio 객체
        ***********************************
                <input type="Radio"~/> 태그를 관리하는 객체이다.
                위 태그가 실행되어 웹브라우저에 출력될 떄 [라디오 버튼]라고 부른다.
                name값이 같은 라디오 버튼의 개수가 2개 이상일 경우 속성변수 호출        => document.form태그name값.radio name[i]값.속성변수
                name값이 같은 라디오 버튼의 개수가 2개 이상일 경우 메소드 호출          => document.form태그name값.radio name[i]값.메소드(~)
                name값이 같은 라디오 버튼의 개수가 1개 이상일 경우 속성변수 호출        => document.form태그name값.radio name값.속성변수
                name값이 같은 라디오 버튼의 개수가 1개 이상일 경우 메소드 호출          => document.form태그name값.radio name값.메소드(~)
                Checkbox 객체 속성변수 
                        value    => 체크된 체크박스 버튼 태그의 value 속성값이 저장되어 있다
                        checked  => 체크 여부 정보가 저장되어 있다. 체크가 되어 있으면 true 가 저장되고 체크가 안되어 있으면 false 가 저장된다.
                                        <주의>체크가 된 놈의 value 값이 서버로 전송된다.
                                        체크가 안된 놈의 value 값은 서버로 전송되지 않는다.
                Checkbox 객체 메소드 
                        click( ) => checkbox 단추의 체크를 넣어주거나 혹은 빼준다.
                                        document.xForm.gender[1].click()  코드가 실행되면 
                                                <input type="checkbox" name="skill" ~> 태그에 의해 출력되는 2번째 체크박스 버튼에 체크 넣거나 풀기.
        ********************************************
        ●Select  객체
        ********************************************
                <select name="xxx" ~> 태그를 관리하는 객체이다.
                위 태그가 실행되어 웹브라우저에 출력될 때 [목록 상자]라고 부른다.
                메소드 호출 코딩        => document.Form태그name값.select태그name값.메소드(~)
                속성변수 호출 코딩      => document.Form태그name값.select태그name값.속성변수
                select 객체 속성변수
                        value           => 선택한 목록의 value값이 저장되어 있다
                        size            => 목록상자의 펼쳐진 개수가 저장되어 있따.
                        multiple        => 다중 선택 가능 여부 저장. true가 있으면 ctrl누르고 다중 선택이 가능.
                        options         => Option 객체들을 저장한 Array 객체의 메위주가 저장되어 있다.
                select 객체 메소드
                        focus()         => 포커스를 들여놓는다
                        blur            => 포커스를 뺸다.
        ********************************************
        ●Option 객체
        ********************************************
                option 태그를 관리하는 객체이다. option 태그는 <select  ~> </select>태그 안에 삽입되는 태그이다.
                속성변수 호출 =>  document.form태그name값.select태그name값.options[인덱스번호].속성변수
                Option 객체 속성변수 
                        text  => <option value="값">문자열</option>  에서 문자열이 저장되어 있다
                        value => <option value="값">문자열</option>  에서 "값"이 저장되어 있다
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<22> JQuery 객체 생성 방법과 메소드/속성변수 사용 방법
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ********************************************
        ●Jqeury 객체란 무엇인가?
        ********************************************
                ▶특정 단체에서 만들어 무료로 제작되어 배포되는 [사용자 정의 객체] 중의 하나이다.
        ********************************************
        ●Jqeury 객체 장점
        ********************************************
                대부분의 브라우저에서 동일한 실행 결과를 가진다.(=크로스 브라우징=cross browsing)
                개발자, 디자이너 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
                        즉 짧은 코딩으로 원하는 일을 쉽게 처리한다.
        ********************************************
        ●Jqeury 객체가 할 수 있는 일
        ********************************************
                DOM 객체의 메소드나 속성변수를 기존 자스 코딩보다 쉬운 방법으로 호출할 수 있다.
                        <form name="xForm" ~ >
                                <input type=text name="uid" />
                        </form>
                        var uid = document.xForm.uid.value;      //코딩 상 DOM 객체의 메소드나 속성변수를 호출하여 value 값 얻기
                        var uid = $("[name=uid]").val();         //코딩 상 DOM 객체의 메소드나 속성변수를 호출하지 않고 부르지 않고 밸류값 얻기.
                쉬운방법으로 비동기 방식으로 웹서버와 통신을 지원하는 JQuery 객체의 메소드가 존재한다.
                쉬운방법으로 에니메이션 관련 작업을 지원하는 JQuery 객체의 메소드가 존재한다.
                쉬운 방법으로 [이벤트]설정 및 [이벤트 처리]를 지원하는 JQuery 객체의 메소드가 존재한다.
        ********************************************
        ●Jqeury 객체의 메위주 얻는 방법
        ********************************************
                JQuery("선택자") 또는 $("선택자") 라는 함수를 호출하면 리턴되는 데이터가 JQuery객체의 메위주 이다.
                예> var obj = $("[name=uid]"); // 이때 JQuery는 name=uid 를 가진 태그를 관리한다. "[name=uid]"가 바로 선택자이다. (.className || #IDName) 등 등. . .
                예> var obj = $(".pwd");
                예> var obj = $("#addr");
                예> var obj = $(".family .relation"); // class=family 를 가진 태그의 후손. 즉 내부에 clss = relation 을 가진 태그를 관리한다. 부모 - 자식 관계를 공백으로 표현.
                예> var obj = $("div");         // div태그를 관리한다.
                예> var obj = $(".xxx div");         // .xxx클래스 밑의 모든 div태그를 관리한다.
                <참고> 선택자(selector) 는 태그를 가르키는 방법론
        ********************************************
        ●Jqeury 객체 사용 방법
        ********************************************
                <1>jquery-x.x.x.min.js 다운 받는다. x는 임의의 버전 번호이다.
                <2>HTML head 태그에 아래와 같이 수입하는 코드를 작성한다.
                        <script src = "jquery-x.x.x.min.js" type="text/javascript"></script>
                        jqeury-x.x.x.min.js 안에는 $ 함수와 JQUery 객체의 메소드/ 속성변수 등이 정의 되어 있다.
                <3>위 수입하는 코드 이후에서 $("선택자")를 호출하여 JQuery 객체의 메위주를 얻어 변수에 저장한다.
                <4>변수.메소드(~) 로 JQuery 객체의메소드를 호출한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<23> 자바스크립트 사용자 정의 객체에 대해서
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ● 개발자가 직접 만든 [생성자 함수]로 부터 만들어지는 객체를 말한다.
        ● [생성자 함수]란 일반 함수와 달리 객체 생성 목적으로 만들어진 함수이다.
                <참조> 저자마다 [생성자 함수]를 [클래스]라고 부르는 저자도 있다.

        생성자 함수 형식
                function 생성자함수명([매변1]){

                        this.속성변수명 = 데이터1;

                        this.메소드명 = function([매변2]){
                                실행코드;
                                [return[데이터2];]
                        }

                };
                속성변수는 0개 이상 선언이 가능
                메소드는 0개 이상 선언이 가능
                <참고> 실무적으로 속성변수 또는 메소드가 1개 이상은 선언이 되어야한다.
                매개변수는 0개 이상 선언이 가능하고 2개 이상이면 매개변수명, 매개변수명 ~ 으로 선언.
        생성자 함수를 객체화 하는 코딩 형식.
        var 변수명 = new 생성자함수명( [데이터1] );
                예>function Sungjuk( s_no, s_name,kor,eng,mat ){
                        this.s_no = s_no;
                        this.s_name = s_name;
                        this.kor = kor;
                        this.eng = eng;
                        this.mat = mat;
                        this.getS_no = function(){
                                return this.s_no;
                        }
                        this.getS_name = function(){
                                return this.s_name;
                        }
                        this.getKor = function(){
                                return this.kor;
                        }
                        this.getEng = function(){
                                return this.eng;
                        }
                        this.getMat = function(){
                                return this.mat;
                        }
                        this.getTot = function(){
                                return this.kor + this.eng + this.mat;
                        }
                        this.getAvg = function(){
                                return this.getTot()/3;
                        }
                };
                var sungjuk = new Sungjuk( 1,"사오정",91,81,71 );
                alert( sungjuk.getKor() );      // 91이 뜬다.
                ▶변수를 선언한다.
                ▶new에 의해 지정한 생성자함수를 메모리 공간으로 올려 객체화한다.
                ▶생성자함수([데이터1])에 의해 생성자 함수를 호출한다.
                        이때 매개변수가 있다면 데이터1이 매개변수로 전달된다.
                ▶[객체의 메모리 위치 주소값]을 리턴하여 [변수]에 저장한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<24> 자바스크립트 [일회성 사용자 정의 객체]에 대해서.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●[생성자 함수] 없이 만들어지는 객체를 말한다.
        ●일회만 사용할 목적으로 만들어지는 객체이기도 하다.

        일회성 사용자 정의 객체 생성 코딩 형식
                var 객체참조변수 = {

                        속성변수명 : 데이터,

                        메소드명 : function([매변2]){
                                실행코드;
                                [return[데이터];]
                        }

                }

                예>var sungjuk = {
                        //----------------------------
                        // 속성변수 선언
                        //----------------------------
                        s_no:1
                        ,s_name:"사오정
                        ,kor:91
                        ,eng:81
                        ,mat:71
                        //----------------------------
                        // 메소드 선언
                        //----------------------------  
                        ,getS_no:function( ) {
                                return this.s_no;
                        }
                        ,getS_name:function( ) {
                                return this.s_name;
                        }
                        ,getKor:function( ) {
                                return this.kor;
                        }
                        ,getEng:function( ) {
                                return this.eng;
                        }
                        ,getMat:function( ) {
                                return this.mat;
                        }
                        ,getTot:function( ) {
                                return this.kor + this.eng + this.mat;
                        }
                        ,getAvg:function( ) {
                                return this.getTot()/3;
                        }
	        }

                속성변수는 0개 이상 선언가능
                메소드는 0개 이상 선언가능.
                실무적으로 속성변수나 메소드는 1개 이상 선언해야한다.
                실무적으로 [일회성 사용자 정의 객체] 안에 메소드는 잘 나오지 않는다.
                주로 여러 데이터 한곳에 모아 보관하고 사용할 목적으로 사용한다.

        일회성 사용자 정의 객체의 메소드/속성변수 호출방법
                변수.속성변수
                변수.메소드명(~)
        
        다량의 데이터를 저장해서 관리하는 방법
                -----------------------------
                방법1 ) 데이터 마다 일일이 변수 다 만듬.        //사실상 변수가 늘어날수록 굉장히 비효율적이므로 안쓰는게 맞다.
                -----------------------------
                var kor = 91;
                var eng = 81;
                var mat = 71;
                var che = 61;
                var phy = 51;
                -----------------------------
                방법2 ) Array 객체에 저장한다.                  // 변수를 넘겨줄때 Array객체만 넘겨주면 되긴하지만, 만약 각각 다른 종류의 데이터가 들어있다면 구분하기가 불가능하기 때문에
                                                                // 단순하고 일방적인 데이터를 저장할때 쓰는것이 좋다. 예(사과 100개의 크기를 저장할때는 var appleWeight[200,210,180, ~] 
                                                                // 각각 다른 과목의 점수를 저장할때는 어떤 과목의 점수가 어느 인덱스에 저장되어있는지 구별이 불가능하기 때문에 Array를 안쓰는게 좋다.)
                                                                // 최대 장점 : 반복문 사용가능. 최대 단점 : 복잡한 데이터를 저장할때 구별이 매우매우 어려움.
                -----------------------------
                var jumsu = [91,81,71,61,51];
                -----------------------------
                방법3 ) 일회성 사용자 정의 객체에 저장한다.     // 비슷한 종류지만 각각 다른 데이터타입(혹은 기준)의 데이터를 구별하기 쉽고 다른 쪽으로 넘겨줄때 편하게 묶어서 저장하고 싶은때 쓴다.
                                                                // 예) 수학, 영어, 국어, 과학 점수를 저장할떄, 똑같이 점수를 저장하지만 무슨과목의 점수인지(어떤 데이터타입의 데이터인지) 구별해주고 싶을때 쓴다.
                                                                // 최대장점 : 이 데이터가 무슨 데이터인지 알기쉬워서 꺼내쓰기 쉽고 좋다. 최대 단점 : 반복문 사용이 힘들다. 키 값을 알아야지만 데이터를 꺼낼수 있따.
                -----------------------------
                var jumsu = {kor:91,eng:81,mat:71,che:61,phy:51};
                -----------------------------*******************************************
                오라클 테이블로 따지자면 한 행은 일회성 사용자 정의 객체에(각각 컬럼:데이터 로 어떤 것에대한 데이터인지 확인이 가능), 
                각 행은 배열에(어떤 데이터들이 있는 배열인지.예 : 테이블명 = Array객체 변수명) 넣는다.
                이렇게 하면 반복문도 사용이 가능하고, 총 행이 몇개있는지도 length 속성변수로 쉽게 알 수 있따!!!!!
                -----------------------------*******************************************
        문제! 오라클 dept 테이블에 다음과 데이터가 저장되어 있을 경우
                자스 영역으로 데이터를 끌고 와서 관리한다면 어떻게?
                
                dep_no  dep_name  loc
                10      총무부    서울
                20      영업부    부산
                30      전산부    대전
                40      자재부    광주

                var dept = [
                        {dep_no:10,dep_name:"총무부",loc:"서울"}
                        ,{dep_no:10,dep_name:"영업부",loc:"부산"}
                        ,{dep_no:10,dep_name:"전산부",loc:"대전"}
                        ,{dep_no:10,dep_name:"자재부",loc:"광주"}
                ];

                40번 부서의 이름 꺼내는 방법 ?          dept[3].dep_name
                부서의 개수?                            dept.length
                
                // 아래와 같이 2차원 Arrat객체를 사용할수는 있으나, 각 데이터가 어떤 데이터인지 구별하기 어려우므로 좋은 코딩은 아니다.
                var dept = [
                        [10,"총무부","서울"]
                        ,[10,"영업부","부산"]
                        ,[10,"전산부","대전"]
                        ,[10,"자재부","광주"]
                ];
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<25> [JSON]이 무엇인가? ****** 솔루션 회사 면접 질문
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●동종 또는 이기종 s/w끼리 쉽게 데이터를 전달하기 위해 만든 [개방형 표준 데이터 표기법]을 말한다.
        ●일회성 사용자 정의 객체 표현법과 동일하다.
        ●JSON = Javascript Object Notation = 자바스크립트 객체 표기법
        ●JSON 특징
                각종 프로그래밍 언어나 플랫폼(=platform)에 종속되지 않는 독립형 데이터 포맷이다.
                <참고>플랫폼 = 특정 서비스를 하기 위한 기반. 보통 플랫폼은 무료이고 플랫폼이란 기반 위의 서비스는 유료.
        ●JSON 장점
                다양한 프로그래밍 언어에서 동종 또는 이기종 s/w 끼리 쉽게 데이터를 전달할 수 있다.
                스프링 같은 프레임 워크 사용시 웹브라우저에서 [비동기 방식]으로 서버와 데이터를 주고 받을 때 JSON 사용하기도 한다.
        ●JSON 단점
                반복문 돌리기가 매우 곤란하다.
                키값을 알아야지만 데이터를 꺼낼수 있다.
        ●JSON 형식 과 키값에 대응하는 데이터 호출방법.
                JSON의 형식
                {
                        "문자열1" : 데이터,
                        "문자열2" : 데이터,
                        ~
                        "문자열n" : 데이터
                }
                <참고> "문자열1" 을 키값이라고 부른다.
                데이터는 주로 문자열 또는 숫자 이다. 즉 , 모든 프로그래밍 언어가 이해할수 있도록 특유의 문법이 들어가는 데이터 (익명함수등)은 넣지 않는다.
                JSON안의 키값에 대응하는 데이터 호출 형식
                        변수명["키값"]
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<26> <body onLoad="openMessage()"> 코드의 의미!!
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        웹 브라우저가 body 태그 안에 태그들을 모두 읽어 들인 후에
        자바스크립트의 openMessage 라는 함수를 호출해라.




// 이론적인 것 면접에서 질문 받으면
// 정의
// 부연설명
// 예 를 들어 설명해라.
