■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JAVASCRIPT 란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●html 언어에 부가되어 웹페이지를 좀 더 동적이고 다양하게 제작할 수 있는 기법을 제공하는 스크립트 언어의 일종이다.
        ●현재 대부분의 웹브라우저에서 자바스크립트 코딩을 읽어 기능을 구현하는 [java script 엔진]이 탑재되어 있다.
            ▶<참고> v8 => 구글의 크롬 브라우저와 안드로이드 브라우저에 탑재된 자바스크립트 엔진 이름이다.
        ●<참고> 스크립트 언어의 특징.
            ▶혼자 실행되지 못하고 다른 언어에 포함되어 실행된다.
            ▶스크립트 언어 종류 => JSP, ASP, PHP등.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JAVASCRIPT 의 기능이 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●입력 양식에 입력/선택된 데이터에 대한 검증을 한다. (=유효성 체크)
        ●태그의 속성값을 입력/수정/삭제 하거나 태그 자체의 입력/삭제 작업을 한다. 태그 컨트롤을 할 수 있다.
                <참고> 태그 컨트롤은 자바스크립트보다는 JQuery를 사용하는게 더 좋다.
        ●AJAX를 통하여 웹 서버와의 데이터 통신을 한다.
                ▶AJAX => 비동기 방식으로 웹서버와 통신한 후 통신 결과물을 현 화면에 반영하는데 사용되는 기술들을 총칭한다.
                        [XMLHttpRequest 객체/DOM/자바스크립트/css] 기술들을 총칭한다.
                ▶비동기 방식 => 페이지 이동 없이 웹서버와 통신하는 방식을 말한다.
                    예) 네이버 검색창에 키워드 입력시 관련검색어가 뜬다. 서버에서 관련검색어를 가져왔고, 페이지가 그대로 있기때문에 비동기 방식이다.
                ▶동기 방식 => 페이지가 이동하면서 웹서버와 통신하는 방식을 말한다.
                    예) 네이버 검색창에 키워드를 넣고 검색을 누르면 페이지가 바뀌면서 키워드와 관련된 검색결과들이 나오는데 이것이 동기이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JAVASCRIPT 의 장점이 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ● Server에서 Client 쪽으로 전달되어 실행이 되므로 Server에 부담을 주지 않는다.
        ● 변수, 연산자, 조건문, 반복문, 함수, 객체 등을 사용하여 프로그래밍의 수준에서 처리할 수 있게 한다.
        ● AJAX 기술을 사용하여 간접 DB연동이 가능하다.
        ● 문법이 자바나 c보다 간단하여 학습이 쉽다. <예> 모든 변수의 형식 검사를 하지 않음 등.
        ● [보안성], [소스 중요성]이 없는 역활은 JAVASCRIPT가 담당하고, 반대인 경우는 서버 쪽 프로그래밍 언어가 담당한다.
        ● 모바일 분야에서도 활용된다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> Javascript 단점이 뮘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●HTML 소스코드 안에 포함되어 있기 때문에 소스가 노출된다. 즉 클라이언트가 JAVA SCRIPT 소스를 볼 수 있다.
        ●JAVA, C 언어 같은 강력한 기능의 프로그램을 만들 수 없다. 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> Javascript 를 부르는 다른 이름이 있다는데 뮘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        JavaScript               -> Mozilla Firefox,Google Chrome,Apple Safari, Adobe Acrobat
        Internet Explorer        -> JScript
        Opera                    -> ECMAScript
        .NET                     -> JScript.NET
        Adobe Flash & Adobe Flex -> ActionScript
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> Javascript 는 html 안에서어디에 삽입됩니까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        script태그 안에 삽입된다.
        <script>
                자바스크립트 코드;
        </script>
        <script>~</script>의 위치는 자스안에 함수가 있다면 head태그 안에 위치시키고 자스안에 함수가 없다면 원하는 실행 위치에 삽입한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> 2개 이상의 html안에서 동일한 자바스크립트 코드를 자주 사용할 경우 유지 보수가 힘들다.
        즉 자스코드가 변경 되면 모든 html 의 자스코드를 수정해야 한다.
        해결책?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        자스코드를 xxx.js 파일에 저장하고 각 html 에서 아래 처럼 수입하면 된다.
        <script src="xxx.js"></script>
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> 자바스크립트는 프로그래밍 언어이다. 자스에서 자료형의(=데이터 타입(=data type)) 종류는?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        (1)숫자형
                ▶정수, 실수 데이터를 말한다.
        (2)문자형
                ▶문자 데이터를 말한다.
                ▶"로 감싼다. <참고> '로 감싸도 되지만 되도록 "로 감싼다.
                ▶""또는 ''는 길이가 없는 문자 데이터이다.
        (3)boolean
                ▶true 또는 false데이터를 말한다. 진실이냐 거짓이냐
        (4)함수형
                ▶function(매개변수){실행구문;}의 형태 데이터를 말한다.
                ▶function(매개변수){실행구문;} 의 형태를 익명함수라고 부른다.
                ▶예) var doubleNum = function(num){return num*num;} 의 형태를 익명함수라고 부른다.
        (5)객체형
                ▶객체가 차지하는 메모리 공간의 위치 주소값을 말한다.
                ▶객체가 차지하는 메모리 공간의 위치 주소값을 알면 객체가 소유한 속성변수나 메소드를 호출할 수 있다.
                        객체 생성의 목적은 메소드나 속성변수 호출이다.
        (6)undefined
                ▶알 수 없는 데이터를 말한다. 즉 프로그램에서 사용할 수 없는 데이터를말한다.
                ▶위 5가지 자료형 이외의 자료형을 말한다.
                ▶"아 몰랑 데이터"
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 자바스크립트에서 변수 선언은 어떻게 할까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●변수 정의 => 데이터가 저장되는 [메모리의 기억장소]에 붙인 이름을 말한다.
                        [비유]음식을 담는 그릇과 동일한 개념이다.
        ●변수 사용 목적 => 데이터를 변수에 저장함으로써 재사용이 가능하다.
                          데이터를 변수에 저장하지 않으면 데이터를 재 사용할 수 없다.
        ●변수 선언 목적 => var(let) 변수명 = 데이터;
        ●변수명 제작 규칙
                ▶변수 이름은 [영문], [숫자],  _ , $ 로 만 구성된다. 단, 영문 중 예약어 (var, if 등)은 불가능하다.
                        ▶<주의>변수명의 중간에 공백이 있으면 안 된다. <참고>영문 대신 한글,일어,한자 등 도 가능하나 영문을 사용한다.
                        ▶변수명의 첫 글자로 숫자가 올 수는 없다.
                        ▶변수명은 영문 대, 소문자를 구별한다.
                        ▶관용적 변수명 제작 규칙
                                ▶영문, 숫자, _ 로 구성한다.
                                ▶변수명의 첫 글자는 영문으로 시작한다.
                                ▶3자 이상으로 제작한다.
                                ▶변수명을 보고 저장되는 데이터의 종류를 알 수 있도록 의미 있게 준다. (=가독성 있게 준다)
                        ▶변수명 사용 불가능 예 
                        =>273alpha, has space
                        =>break, else, instanceof, true, case, false, new, try, catch, finally, null. typeof, continue, for, return, var, default, function, switch 등
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> 자바스크립트에서 변수 종류는?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●전역변수
                ▶하나의 HTML파일 안의 모든 자바스크립트에서 공유 가능한 변수다.
                ▶주로 함수 밖에서 var를 붙이거나 var 없이 선언된 변수다.
        ●지역변수
                ▶함수 안에서 var로 선언되어 함수 안에서만 사용되는 변수다.
                ▶<주의>함수 안에서 var 없이 선언된 변수는 함수 밖에서도 호출 가능한 전역변수가 된다.
                ▶<예> function getTot(){var base = 80; ~}
        ●매개변수
                ▶함수 호출 시 전달되는 데이터를 저장하는 변수다.
                ▶함수 안에서만 사용가능한 지역변수이다.
                ▶<예>function 함수명( 매개변수 ){ 실행구문; }
                        function getTot( kor ){ ~ }
                ▶<주의>매개변수 앞에는 절대 var를 붙이지 않는다. 에러발생.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> 자바스크립트에서 함수가 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●[실행구문영역]에 이름을 붙여 선언한 후 필요 시점에 이름을 호출하여 [실행구문]을 실행하는 일종의 [단위 프로그램]이다.
        ●반복 사용하는 실행구문을 함수로 만들어 놓으면 보관이 용이하고, 언제든지 쉽게 호출하여 사용할 수 있다.
        ●<참고>함수 보다 더 조직적인 [단위 프로그램은] [객체]이다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> 자바스크립트에서 함수의 종류.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●정적함수(선언적 함수)
                ▶[함수명]을 붙여 선언하는 함수
                ▶ 정적 함수의 형태.
                        ```Javascript
                        function 함수명( 매개변수 ){
                                실행구문;
                                [return [반환값]]
                        }
                        ```
                        대괄호 생략 가능.
                        매개변수는 0개 이상 나올 수 있고 ,로 나열함
                        매개변수 왼쪽에 자료형이 없다.(var, let, const 등)
                        ●함수명은 변수명 제작 규칙과 동일하다. <주의>함수명 호출 시 함수명 철자와 대소문자가 일치해야한다.
                        ●[매개변수]가 있을 경우 함수 호출 시 매개변수 개수와 자료형에 맞게 데이터를 전달하여 함수를 호출한다.
                        ●함수 안에서 return 반환값; 이 나오면 함수를 중단하고 함수를 호출한 곳으로 [반환값]을 리턴한다. 
                        ●함수 안에서 return; 이 나오면 함수를 중단만 한다.
                        ●<주의>동일한 이름의 정적 함수가 2개 이상 선언되면 마지막 정적함수가 진짜 정적함수이다.
        ●익명 함수
                ▶[함수명]없이 선언하는 함수로, 주로 변수에 저장한다. 즉 데이터의 한 종류이다.
                ▶ 익명 함수의 형태.
                        ```Javascript
                        function ( 매개변수 ){
                                실행구문;
                                [return [반환값]]
                        }
                        ```
                        대괄호 생략 가능.
                        매개변수는 0개 이상 나올 수 있고 ,로 나열함
                        매개변수 왼쪽에 자료형이 없다.(var, let, const 등)
                        함수 이름이 없고, 변수에 저장되는것이 특징.
        ●내장 함수
                ▶자주 사용되는 기능을 가지고 미리 만들어져 제공하는 함수.
                ▶alert("")
        ●사용자 정의 함수
                ▶개발자가 만들어 사용하는 함수. 사용자 정의 = 개발자가 직접 만든.
        ●내부 함수
                ▶함수 내부에 선언된 또 다른 함수.<주의>내장함수와 혼돈하지 말자.
        ●콜백 함수(callback function) (입사문제)
                ▶나중에 필요시 호출해서 사용하라고 전달해 주는 함수를 말한다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> 내장 함수의 종류에는 뭐가 있나요?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●alert("문자열")
                ▶확인 버튼이 있는 [경고 상자]를 보여 준다.
        ●confirm("문자열")
                ▶확인버튼과 취소버튼이 있는 [경고 상자]를 보여준다.
                    확인 누르면 true, 취소누르면 false 리턴되는 특징이있다.
        ●prompt
                ▶[문자열입력상자]와 확인 버튼, 취소 버튼이 있는 상자를 보여주고 [확인] 누르면 입력문자열 리턴
        ●parseInt(숫자문자, 10)
                ▶10진수로 표현된 [숫자문자]를 [정수]로 리턴.
                ▶<참고>[숫자문자]가 실수인 경우 소수 첫째자리부터 모두 버림.
        ●Number( 데이터 )
                ▶데이터가 [숫자] 또는 [숫자문자]면 숫자 리턴. 아니면 naN 리턴.
                ▶<주의> 함수 이름이 대문자이다.
        ●isNaN( 데이터 )
                ▶데이터가 [숫자] 또는 [숫자 문자] false 리턴 , [순수 문자]면 true 리턴.
                ▶<참고> isNaN => Not A Number
        ●setInterval("자스코딩", n초*1000)
         setInterval( function(~){자스코딩;}, n초 * 1000)
         ▶n초 마다 자스코딩을 반복 실행한다. <주의>"자스코딩"에서 "를 빼면 안된다.
         ▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다.
        ●setTimeout("자스코딩", n초*1000)
         setTimeout( function(~){자스코딩;}, n초 * 1000)
         ▶n초 후에 자스코딩을 실행한다. <주의>"자스코딩"에서 "를 빼면 안된다.
         ▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다.
        ●typeof( 데이터 )
                ▶데이터의 자료형을 문자열로 리턴.
                ▶(예)typeof( 3 )                            => "number" 리턴
                ▶(예)typeof( "햄버거" )                     => "string" 리턴
                ▶(예)typeof( function 함수명(~){~} )        => "function" 리턴
                ▶(예)typeof( new Date() )                   => "Object" 리턴
                ▶(예)var xxx; typeof( xxx )                 => "undefined" 리턴
        ●eval( "문자열" )
                ▶문자열을 자바스크립트 실행 코드로 바꾸어 실행한다.
        ●기타등등.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> 객체(Object)가 뭘까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●[메모리] 공간에 존재하는 [단위 프로그램]으로 [메소드]와 [속성변수(=프로퍼티)]로 구성되어 있다.
            ▶속성변수(=프로퍼티)
                ▶메소드 안에서 사용할 데이터를 저장하고 있다.
            ▶메소드(=method)
                ▶실행구문이 저장되어 있다.
                ▶메소드명 호출 시 지정한 실행구문이 실행되면 경우에 따라 호출 후 리턴 값이 있을 수 있다.
                ▶메소드는 결국 함수와 동일하다. 즉 함수가 객체안에서는 메소드로 불리운다.
        ●[객체]의 [속성변수]를 호출하여 저장된 데이터를 얻거나 데이터를 저장할 수 있고,
            [메소드]를 호출함으로써 특정 실행구문을 반복 실행 할 수 있다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> 자바스크립트에서 사용 가능한 객체(Object) 종류에는 뭐가 있나?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●DOM(=Document Object Model) 객체
            ▶W3C 라는 단체가 [여러 브라우저 제작사]들과 협력하여 제작한 객체이다.
            ▶대부분의 브라우저에서 DOM 객체를 사용할수 있다.
            ▶DOM 객체의 기능
                HTML [태그]의 각종 정보를 소유하고, [태그]에 대응하는 [컨텐츠]를 [웹 브라우저 화면]에 출력한다.
                <참고> W3C => 웹을 위한 표준을 연구/개발하고 장려하는 단체이다.
            ▶DOM 객체에 대한 설명
                    xxx.html 파일안에 <input type="text" name = "uid"> 라는 태그 있다면
                    웹브라우저 이 태그를 읽어들이면서 다음과 같은 진행을 가진다.
                    (1)웹 브라우저가 <input type="text" name = "uid">를 읽어들인다
                    (2)Text 객체 생성된다. Text 객체의 속성변수에는 name, type, value 등등이 있다.
                        name 속성변수에는 문자 "uid"가 저장되어 있고
                        type 속성변수에는 문자 "text"가 저장되어 있고
                        value 속성변수에는 유저가 입력한 데이터가 저장되어 있다.
                    (3)Text 객체에 대응하는 입력양식에 웹브라우저에 출력된다.
                    (4)웹브라우저에서 입력양식에 데이터를 입력하면 Text객체의 value속성에 입력한 데이터가 저장된다.
                        즉 웹브라우저의 입력양식과 Text객체의 value 는 sync가 된다.
                        만약 자스코딩으로 Text객체에 접근해서 value속성 변수안에 데이터를 삽입하면
                        웹브라우저 입력양식에 그대로 보인다.
        ●BOM 객체
                ▶브라우저 제작사 별로 자체 제작한 객체를 말한다.
                ▶주로 페이지 이동, 모니터 정보 관리, 새 웹브라우저 화면 띄우기, 방문한 URL 주소 관리, 
                        웹브라우저 종류/버전 관리, 이벤트 관리 등의 기능을 가진다.
                ▶location.replace("URL주소")
                        location 변수안에 Location 객체의 메위주가 들어 있다.
                        location 변수는 웹브라우저가 만들어저 제공하는 변수이다.
                ▶<주의>브라우저 제작사 별로 만든 [객체]이므로 
	                한번 작성된 BOM 객체 메소드나 속성변수 호출 코딩은
	                브라우저 종류별이나 버전별로  동일한 결과를 생성하지 못하거나 오류가 발생하기도 한다.


        ●자바스크립트 내장 객체
            ▶자바스크립트 차원에서 미리 만들어 저장된 객체를 말한다.
            ▶각종 데이터를 생산/관리한다.
            ▶예> var today = new Date(); // 날짜를 관리하는 Date 객체 생성하고 객체의 메위주를 today변수에 저장한다.
            ▶예> 지금 이 순간의 년도를 얻어서 thisYear 라는 변수에 저장하고 싶다면
                        아래 처럼 Date 객체를 생성하고 getFullYear 메소드를 호출하면 된다.
                        ▶var today = new Date();
                        ▶var thisYear = today.getFullYear();
        ●자바스크립트 사용자 정의 객체
            ▶자바스크립트 문법에 맞추어 개발자가 직접 만들어 저장한 [생성자 함수]로부터 만들어지는 객체를 말한다.
            ▶[생성자 함수]는 일반 함수와는 다르게 객체의 전신으로써 속성변수와 메소드가 선언되어 있다.
                저자에 따라 [생성자 함수]를 클래스 라고 부르기도 한다.
            ▶자바스크립트 사용자 정의 객체는 주로 웹 관련 솔루션에서 만들어 사용한다.
        ●JQuery 객체
            ▶특정 단체에서 만들어 무료로 제작되어 배포되는 사용자 정의 객체 중의 하나이다.
            ▶장점
                ▶개발자, 디자이너, 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
                ▶크로스 브라우저, 대부분의 브라우저에서 동일한 실행 결과를 가진다.
            ▶단점
                ▶정해진 코딩 패턴이 없다. 즉 개발자 마다 다양한 코딩을 하게 되므로 유지 보수가 힘들다.
                    그래서 요즘 현업에서는 JQuery 객체 대신에 react를 많이 사용하고 있다.
                ▶<참고> react
                        자바스크립트로 화면 UI를 만들수 있는 독단적인 플랫폼이다.
                        nodeJS를 기반으로 작동한다.
                        퍼즐 맞추듯이 미리 만든 조각들을 모아 화면을 구성하므로 코딩 재사용성이 좋다.
                        일전한 코딩 패턴으로 유지보수성이 좋고
                        웹브라우저 부하를 적게 준다.
            ▶기능
                ▶개발자 원하는 강력한 기능을 지원한다.
                    ▷DOM 객체를 쉽게 컨트롤 할 수 있어 컨텐츠의 추가/수정/삭제가 쉽다.
                    ▷비동기 방식으로 서버와 통신을 지원한다.
                    ▷에니메이션 관련 작업을 지원한다.
                    ▷[이벤트] 설정 및 처리를 지원한다. 등등
            ▶사용방법
                웨브라우저에 기본적으로 내장되지 않아서 수입해야 한다.
                즉 온라인 상에서 무료로 제공되는 [jquery-xxx.js] 파일을 다운로드 한 후
                html 파일 안에서 수입해야 한다.
            ▶JQeury 객체를 생성하고 메모리 위치 주소값을 얻는 방법.
                    var 변수명 = $("태그를 지칭하는 선택자");
                    변수명.JQeury객체메소드
                    변수명.JQeury객체속성변수
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> 자바스크립트 내장 객체의 종류와 메소드/속성변수 정리.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        ●Array 객체
            ▶다량의 데이터 저장하고 관리하는 객체.
            ▶객체 생성 & 데이터 저장 방법. => (1)var 변수명 = new Array(데이터1,~,데이터 n); << 잘 안쓴다.
                                              (2)var 변수명  = new Array();
                                                        변수명.push(데이터1);
                                                        ~
                                                        변수명.push(데이터n);
                                              (3)var 변수명  = new Array();
                                                        변수명[0] = 데이터1;
                                                        ~
                                                        변수명[n] = 데이터n;
                                              (4)var 변수명 = [데이터1,~,데이터n];
                                              (5)var 변수명 = [];
                                                        변수명.push(데이터1);
                                                        ~
                                                        변수명.push(데이터n);
            ▶Array 객체의 메소드 종류
                ▶ push(데이터);             =>  Array 객체안에 마지막에 배열변수 만들고 그 배열 변수에 데이터 저장하기.
                ▶ join("연결문자");         =>  Array 객체가 소유한 모든 저장 데이터를 연결문자로 연결하여 문자열로 리턴.
        ●
        ●
        ●
        ●
        ●
        ●
        ●
        ●
        ●